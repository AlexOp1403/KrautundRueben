{
  "swagger": "2.0",
  "info": {
    "description": "Create APIs at the speed of your thoughts",
    "version": "1.0.0",
    "title": "XgeneCloud",
    "contact": {}
  },
  "host": "localhost:8080",
  "basePath": "/",
  "tags": [
    {
      "name": "common"
    },
    {
      "name": "Authentication",
      "description": "Everything about User Authentication"
    },
    {
      "name": "BESTELLUNG_REZEPTBelongsToBESTELLUNG",
      "description": "Everything about belongs to relation"
    },
    {
      "name": "BESTELLUNG_REZEPTBelongsToREZEPT",
      "description": "Everything about belongs to relation"
    },
    {
      "name": "BESTELLUNG_REZEPT",
      "description": "Everything about your BESTELLUNG_REZEPT"
    },
    {
      "name": "BESTELLUNGBelongsToKUNDE",
      "description": "Everything about belongs to relation"
    },
    {
      "name": "BESTELLUNGHasManyBESTELLUNG_REZEPT",
      "description": "Everything about has many relation"
    },
    {
      "name": "BESTELLUNG",
      "description": "Everything about your BESTELLUNG"
    },
    {
      "name": "ERNAEHRUNGSKATEGORIEHasManyKATEGORIE_ZUTAT",
      "description": "Everything about has many relation"
    },
    {
      "name": "ERNAEHRUNGSKATEGORIE",
      "description": "Everything about your ERNAEHRUNGSKATEGORIE"
    },
    {
      "name": "KATEGORIE_ZUTATBelongsToERNAEHRUNGSKATEGORIE",
      "description": "Everything about belongs to relation"
    },
    {
      "name": "KATEGORIE_ZUTATBelongsToZUTAT",
      "description": "Everything about belongs to relation"
    },
    {
      "name": "KATEGORIE_ZUTAT",
      "description": "Everything about your KATEGORIE_ZUTAT"
    },
    {
      "name": "KRITISCHE_INHALTSSTOFFEHasManyZUTAT_KRITISCHE_INHALTSSTOFFE",
      "description": "Everything about has many relation"
    },
    {
      "name": "KRITISCHE_INHALTSSTOFFE",
      "description": "Everything about your KRITISCHE_INHALTSSTOFFE"
    },
    {
      "name": "KUNDEHasManyBESTELLUNG",
      "description": "Everything about has many relation"
    },
    {
      "name": "KUNDE",
      "description": "Everything about your KUNDE"
    },
    {
      "name": "LIEFERANT_SENDUNGBelongsToLIEFERANT",
      "description": "Everything about belongs to relation"
    },
    {
      "name": "LIEFERANT_SENDUNGBelongsToSENDUNG",
      "description": "Everything about belongs to relation"
    },
    {
      "name": "LIEFERANT_SENDUNG",
      "description": "Everything about your LIEFERANT_SENDUNG"
    },
    {
      "name": "LIEFERANTHasManyLIEFERANT_SENDUNG",
      "description": "Everything about has many relation"
    },
    {
      "name": "LIEFERANT",
      "description": "Everything about your LIEFERANT"
    },
    {
      "name": "REZEPTHasManyBESTELLUNG_REZEPT",
      "description": "Everything about has many relation"
    },
    {
      "name": "REZEPTHasManyREZEPTINHALT",
      "description": "Everything about has many relation"
    },
    {
      "name": "REZEPT",
      "description": "Everything about your REZEPT"
    },
    {
      "name": "REZEPTINHALTBelongsToREZEPT",
      "description": "Everything about belongs to relation"
    },
    {
      "name": "REZEPTINHALTBelongsToZUTAT",
      "description": "Everything about belongs to relation"
    },
    {
      "name": "REZEPTINHALT",
      "description": "Everything about your REZEPTINHALT"
    },
    {
      "name": "SENDUNG_ZUTATBelongsToSENDUNG",
      "description": "Everything about belongs to relation"
    },
    {
      "name": "SENDUNG_ZUTATBelongsToZUTAT",
      "description": "Everything about belongs to relation"
    },
    {
      "name": "SENDUNG_ZUTAT",
      "description": "Everything about your SENDUNG_ZUTAT"
    },
    {
      "name": "SENDUNGHasManyLIEFERANT_SENDUNG",
      "description": "Everything about has many relation"
    },
    {
      "name": "SENDUNGHasManySENDUNG_ZUTAT",
      "description": "Everything about has many relation"
    },
    {
      "name": "SENDUNG",
      "description": "Everything about your SENDUNG"
    },
    {
      "name": "ZUTAT_KRITISCHE_INHALTSSTOFFEBelongsToKRITISCHE_INHALTSSTOFFE",
      "description": "Everything about belongs to relation"
    },
    {
      "name": "ZUTAT_KRITISCHE_INHALTSSTOFFEBelongsToZUTAT",
      "description": "Everything about belongs to relation"
    },
    {
      "name": "ZUTAT_KRITISCHE_INHALTSSTOFFE",
      "description": "Everything about your ZUTAT_KRITISCHE_INHALTSSTOFFE"
    },
    {
      "name": "ZUTATHasManyKATEGORIE_ZUTAT",
      "description": "Everything about has many relation"
    },
    {
      "name": "ZUTATHasManyREZEPTINHALT",
      "description": "Everything about has many relation"
    },
    {
      "name": "ZUTATHasManySENDUNG_ZUTAT",
      "description": "Everything about has many relation"
    },
    {
      "name": "ZUTATHasManyZUTAT_KRITISCHE_INHALTSSTOFFE",
      "description": "Everything about has many relation"
    },
    {
      "name": "ZUTAT",
      "description": "Everything about your ZUTAT"
    }
  ],
  "schemes": [
    "http"
  ],
  "paths": {
    "/health": {
      "get": {
        "tags": [
          "common"
        ],
        "summary": "Get server health",
        "description": "",
        "operationId": "health",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "example": {
                "process_uptime": "282.6 Seconds",
                "process_memory_usage": {
                  "rss": "46.73 MB",
                  "heapTotal": "24.62 MB",
                  "heapUsed": "19.74 MB",
                  "external": "1.59 MB"
                },
                "os_total_memory": "16384.00 MB",
                "os_free_memory": "826.23 MB",
                "os_load_average": [
                  "3.51",
                  "3.36",
                  "3.24"
                ],
                "v8_heap_statistics": {
                  "total_heap_size": "24.62 MB",
                  "total_heap_size_executable": "0.80 MB",
                  "total_physical_size": "22.25 MB",
                  "total_available_size": "2075.67 MB",
                  "used_heap_size": "19.75 MB",
                  "heap_size_limit": "2096.00 MB",
                  "malloced_memory": "0.09 MB",
                  "peak_malloced_memory": "10.10 MB",
                  "does_zap_garbage": 0,
                  "number_of_native_contexts": 2,
                  "number_of_detached_contexts": 0
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/auth/signin": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "User login",
        "description": "",
        "operationId": "login",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Authentication user details",
            "required": true,
            "schema": {
              "$ref": "#/definitions/userAuth"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Authenticated successfully",
            "schema": {
              "$ref": "#/definitions/user"
            }
          }
        }
      }
    },
    "/api/v1/auth/signup": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "User signup",
        "description": "",
        "operationId": "signup",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Signup user details",
            "required": true,
            "schema": {
              "$ref": "#/definitions/user"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Registration success",
            "schema": {
              "$ref": "#/definitions/user"
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/api/v1/auth/signout": {
      "get": {
        "tags": [
          "Authentication"
        ],
        "summary": "User logout",
        "description": "",
        "operationId": "logout",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Logout success"
          }
        }
      }
    },
    "/api/v1/auth/password/forgot": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Password Forgot",
        "description": "",
        "operationId": "passwordForgot",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Signup user details",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "email": {
                  "type": "string",
                  "required": true,
                  "example": "test@xgenecloud.com"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Registration success",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/auth/email/validate/{tokenId}": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Email validate link",
        "description": "",
        "operationId": "emailValidate",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "tokenId",
            "in": "path",
            "description": "random token id received",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "Validated successfully"
          }
        }
      }
    },
    "/api/v1/auth/token/validate/{tokenId}": {
      "get": {
        "tags": [
          "Authentication"
        ],
        "summary": "Validate password reset token",
        "description": "",
        "operationId": "passwordResetTokenValidate",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "tokenId",
            "in": "path",
            "description": "random token id received",
            "required": true,
            "type": "string",
            "format": "uuid"
          }
        ],
        "responses": {
          "200": {
            "description": "Validated successfully"
          }
        }
      }
    },
    "/api/v1/auth/password/reset/": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Password reset",
        "description": "",
        "operationId": "passwordReset",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "tokenId",
            "in": "path",
            "description": "random token id received",
            "required": true,
            "type": "string",
            "format": "uuid"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Reset password details",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "password": {
                  "type": "string",
                  "format": "password",
                  "example": "password",
                  "required": true
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Password reset successfully"
          }
        }
      }
    },
    "/api/v1/user/me": {
      "get": {
        "tags": [
          "Authentication"
        ],
        "summary": "USer details",
        "description": "",
        "operationId": "userDetails",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "User details"
          }
        }
      }
    },
    "/api/v1/user": {
      "put": {
        "tags": [
          "Authentication"
        ],
        "summary": "Update user details",
        "description": "",
        "operationId": "updateUserDetails",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "User details"
          }
        },
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Updated user details",
            "required": true,
            "schema": {
              "$ref": "#/definitions/user"
            }
          }
        ]
      }
    },
    "/api/v1/user/password/change": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Update user details",
        "description": "",
        "operationId": "passwordChange",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "User details"
          }
        },
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Current password and new password",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "currentPassword": {
                  "type": "string",
                  "format": "password",
                  "example": "password"
                },
                "newPassword": {
                  "type": "string",
                  "format": "password",
                  "example": "newPassword"
                }
              }
            }
          }
        ]
      }
    },
    "/api/v1/auth/google": {
      "get": {
        "tags": [
          "Authentication"
        ],
        "summary": "Google authentication url",
        "description": "",
        "operationId": "googleAuthentication"
      }
    },
    "/api/v1/auth/facebook": {
      "get": {
        "tags": [
          "Authentication"
        ],
        "summary": "Facebook authentication url",
        "description": "",
        "operationId": "facebookAuthentication"
      }
    },
    "/api/v1/auth/google/callback": {
      "get": {
        "tags": [
          "Authentication"
        ],
        "summary": "Google authentication callback url",
        "description": "",
        "operationId": "googleAuthenticationCallback"
      }
    },
    "/api/v1/auth/facebook/callback": {
      "get": {
        "tags": [
          "Authentication"
        ],
        "summary": "Facebook authentication callback url",
        "description": "",
        "operationId": "facebookAuthenticationCallback"
      }
    },
    "/api/v1/BESTELLUNG_REZEPT/belongs/BESTELLUNG": {
      "get": {
        "tags": [
          "BESTELLUNG_REZEPTBelongsToBESTELLUNG"
        ],
        "summary": "Get BESTELLUNG_REZEPT list with BESTELLUNG parent",
        "description": "",
        "operationId": "BESTELLUNG_REZEPTWithParent",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/api/v1/BESTELLUNG_REZEPT/belongs/REZEPT": {
      "get": {
        "tags": [
          "BESTELLUNG_REZEPTBelongsToREZEPT"
        ],
        "summary": "Get BESTELLUNG_REZEPT list with REZEPT parent",
        "description": "",
        "operationId": "BESTELLUNG_REZEPTWithParent",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/api/v1/BESTELLUNG_REZEPT": {
      "post": {
        "tags": [
          "BESTELLUNG_REZEPT"
        ],
        "summary": "Add a new BESTELLUNG_REZEPT",
        "description": "",
        "operationId": "addBESTELLUNG_REZEPT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "BESTELLUNG_REZEPT object that needs to add",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BESTELLUNG_REZEPT"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "get": {
        "tags": [
          "BESTELLUNG_REZEPT"
        ],
        "summary": "Get list",
        "description": "",
        "operationId": "getBESTELLUNG_REZEPT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/BESTELLUNG_REZEPT/{BESTELLUNG_REZEPTId}": {
      "get": {
        "tags": [
          "BESTELLUNG_REZEPT"
        ],
        "summary": "Find BESTELLUNG_REZEPT by ID",
        "description": "Returns a single BESTELLUNG_REZEPT",
        "operationId": "getBESTELLUNG_REZEPTById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "BESTELLUNG_REZEPTId",
            "in": "path",
            "description": "ID of BESTELLUNG_REZEPT to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/BESTELLUNG_REZEPT"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "BESTELLUNG_REZEPT not found"
          }
        }
      },
      "put": {
        "tags": [
          "BESTELLUNG_REZEPT"
        ],
        "summary": "Updates a BESTELLUNG_REZEPT",
        "description": "",
        "operationId": "updateBESTELLUNG_REZEPT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "BESTELLUNG_REZEPTId",
            "in": "path",
            "description": "ID of BESTELLUNG_REZEPT to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "BESTELLUNG_REZEPT object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BESTELLUNG_REZEPT"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "BESTELLUNG_REZEPT"
        ],
        "summary": "Deletes a BESTELLUNG_REZEPT",
        "description": "",
        "operationId": "deleteBESTELLUNG_REZEPT",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "BESTELLUNG_REZEPTId",
            "in": "path",
            "description": "ID of BESTELLUNG_REZEPT to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "BESTELLUNG_REZEPT not found"
          }
        }
      }
    },
    "/api/v1/BESTELLUNG_REZEPT/bulk": {
      "post": {
        "tags": [
          "BESTELLUNG_REZEPT"
        ],
        "summary": "Bulk BESTELLUNG_REZEPT insert",
        "description": "",
        "operationId": "bulkBESTELLUNG_REZEPTInsert",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "BESTELLUNG_REZEPT objects",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BESTELLUNG_REZEPT"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "put": {
        "tags": [
          "BESTELLUNG_REZEPT"
        ],
        "summary": "Updates a BESTELLUNG_REZEPT",
        "description": "",
        "operationId": "updateBESTELLUNG_REZEPT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "BESTELLUNG_REZEPT objects with id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BESTELLUNG_REZEPT"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "BESTELLUNG_REZEPT"
        ],
        "summary": "Deletes a BESTELLUNG_REZEPT",
        "description": "",
        "operationId": "deleteBESTELLUNG_REZEPT",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "BESTELLUNG_REZEPT objects contains id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BESTELLUNG_REZEPT"
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "BESTELLUNG_REZEPT not found"
          }
        }
      }
    },
    "/api/v1/BESTELLUNG_REZEPT/findOne": {
      "get": {
        "tags": [
          "BESTELLUNG_REZEPT"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "findOneBESTELLUNG_REZEPT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/BESTELLUNG_REZEPT"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/BESTELLUNG_REZEPT/{BESTELLUNG_REZEPTId}/exists": {
      "get": {
        "tags": [
          "BESTELLUNG_REZEPT"
        ],
        "summary": "Check BESTELLUNG_REZEPT with provided ID exists",
        "description": "Returns a single BESTELLUNG_REZEPT",
        "operationId": "checkBESTELLUNG_REZEPTExists",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "BESTELLUNG_REZEPTId",
            "in": "path",
            "description": "ID of BESTELLUNG_REZEPT",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/BESTELLUNG_REZEPT/count": {
      "get": {
        "tags": [
          "BESTELLUNG_REZEPT"
        ],
        "summary": "Get BESTELLUNG_REZEPT count",
        "operationId": "getBESTELLUNG_REZEPTCount",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/BESTELLUNG_REZEPT/groupby/{columnName}": {
      "get": {
        "tags": [
          "BESTELLUNG_REZEPT"
        ],
        "summary": "Group by column",
        "description": "",
        "operationId": "BESTELLUNG_REZEPTGroupByColumn",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/BESTELLUNG_REZEPT"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/BESTELLUNG_REZEPT/distribution/{columnName}": {
      "get": {
        "tags": [
          "BESTELLUNG_REZEPT"
        ],
        "summary": "",
        "description": "",
        "operationId": "BESTELLUNG_REZEPTDistribution",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "min",
            "description": "min value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "max",
            "description": "max value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "step",
            "description": "step value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "steps",
            "description": "steps value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "func",
            "description": "comma separated aggregation functions",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/BESTELLUNG_REZEPT/distinct/{columnName}": {
      "get": {
        "tags": [
          "BESTELLUNG_REZEPT"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "BESTELLUNG_REZEPTDistinct",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/BESTELLUNG_REZEPT/aggregate/{columnName}": {
      "get": {
        "tags": [
          "BESTELLUNG_REZEPT"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "BESTELLUNG_REZEPTAggregate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "fields",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "func",
            "type": "String",
            "description": "Comma seperated aggregate functions"
          },
          {
            "in": "query",
            "name": "having",
            "type": "String",
            "description": "Having expression"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/BESTELLUNG_REZEPT"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/BESTELLUNG/belongs/KUNDE": {
      "get": {
        "tags": [
          "BESTELLUNGBelongsToKUNDE"
        ],
        "summary": "Get BESTELLUNG list with KUNDE parent",
        "description": "",
        "operationId": "BESTELLUNGWithParent",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/api/v1/BESTELLUNG/has/BESTELLUNG_REZEPT": {
      "get": {
        "tags": [
          "BESTELLUNGHasManyBESTELLUNG_REZEPT"
        ],
        "summary": "Get BESTELLUNG list with BESTELLUNG_REZEPT children",
        "description": "",
        "operationId": "BESTELLUNGHasManyBESTELLUNG_REZEPTList",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields of model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/api/v1/BESTELLUNG/{BESTELLUNGId}/BESTELLUNG_REZEPT": {
      "get": {
        "tags": [
          "BESTELLUNGHasManyBESTELLUNG_REZEPT"
        ],
        "summary": "Find BESTELLUNG_REZEPT list by parent BESTELLUNG id",
        "description": "Returns a single BESTELLUNG",
        "operationId": "getBESTELLUNG_REZEPTByBESTELLUNGId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "BESTELLUNGId",
            "in": "path",
            "description": "ID of BESTELLUNG to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields of model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": "object"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "BESTELLUNG not found"
          }
        }
      },
      "post": {
        "tags": [
          "BESTELLUNGHasManyBESTELLUNG_REZEPT"
        ],
        "summary": "Insert BESTELLUNG_REZEPT under a parent BESTELLUNG",
        "description": "Returns a single BESTELLUNG",
        "operationId": "insertBESTELLUNG_REZEPTByBESTELLUNGId",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "BESTELLUNG_REZEPT object to insert",
            "required": true,
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "BESTELLUNGId",
            "in": "path",
            "description": "ID of BESTELLUNG to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/BESTELLUNG/{BESTELLUNGId}/BESTELLUNG_REZEPT/{BESTELLUNG_REZEPTId}": {
      "get": {
        "tags": [
          "BESTELLUNGHasManyBESTELLUNG_REZEPT"
        ],
        "summary": "Get by BESTELLUNG_REZEPT id parent BESTELLUNG id",
        "description": "Returns a single BESTELLUNG",
        "operationId": "getBESTELLUNG_REZEPTByIdAndBESTELLUNGId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "BESTELLUNGId",
            "in": "path",
            "description": "ID of parent BESTELLUNG",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "BESTELLUNG_REZEPTId",
            "in": "path",
            "description": "ID of BESTELLUNG_REZEPT",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": "object"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "BESTELLUNGHasManyBESTELLUNG_REZEPT"
        ],
        "summary": "Delete by BESTELLUNG_REZEPT id parent BESTELLUNG id",
        "description": "Returns a single BESTELLUNG",
        "operationId": "deleteBESTELLUNG_REZEPTByIdAndBESTELLUNGId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "BESTELLUNGId",
            "in": "path",
            "description": "ID of parent BESTELLUNG",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "BESTELLUNG_REZEPTId",
            "in": "path",
            "description": "ID of cBESTELLUNG_REZEPT",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      },
      "put": {
        "tags": [
          "BESTELLUNGHasManyBESTELLUNG_REZEPT"
        ],
        "summary": "Update BESTELLUNG_REZEPT under a parent BESTELLUNG",
        "description": "Returns a single BESTELLUNG",
        "operationId": "updateBESTELLUNG_REZEPTByIdAndBESTELLUNGId",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "BESTELLUNG_REZEPT object to insert",
            "required": true,
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "BESTELLUNGId",
            "in": "path",
            "description": "ID of BESTELLUNG to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "BESTELLUNG_REZEPTId",
            "in": "path",
            "description": "ID of BESTELLUNG_REZEPT",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/BESTELLUNG/{BESTELLUNGId}/BESTELLUNG_REZEPT/{BESTELLUNG_REZEPTId}/exists": {
      "get": {
        "tags": [
          "BESTELLUNGHasManyBESTELLUNG_REZEPT"
        ],
        "summary": "Check row exists by BESTELLUNG_REZEPT id and parent BESTELLUNG id",
        "description": "",
        "operationId": "existsBESTELLUNG_REZEPTByIdAndBESTELLUNGId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "BESTELLUNGId",
            "in": "path",
            "description": "ID of parent BESTELLUNG",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "BESTELLUNG_REZEPTId",
            "in": "path",
            "description": "ID of BESTELLUNG_REZEPT",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/BESTELLUNG/{BESTELLUNGId}/BESTELLUNG_REZEPT/findOne": {
      "get": {
        "tags": [
          "BESTELLUNGHasManyBESTELLUNG_REZEPT"
        ],
        "summary": "Find one BESTELLUNG_REZEPT by parent BESTELLUNG id and filters",
        "description": "",
        "operationId": "findOneBESTELLUNG_REZEPTByBESTELLUNGId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "BESTELLUNGId",
            "in": "path",
            "description": "ID of parent BESTELLUNG",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields of model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/BESTELLUNG/{BESTELLUNGId}/BESTELLUNG_REZEPT/count": {
      "get": {
        "tags": [
          "BESTELLUNGHasManyBESTELLUNG_REZEPT"
        ],
        "summary": "Get BESTELLUNG_REZEPT count by parent id and filter",
        "description": "",
        "operationId": "getCountWithinBESTELLUNGId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "BESTELLUNGId",
            "in": "path",
            "description": "ID of parent BESTELLUNG",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/BESTELLUNG": {
      "post": {
        "tags": [
          "BESTELLUNG"
        ],
        "summary": "Add a new BESTELLUNG",
        "description": "",
        "operationId": "addBESTELLUNG",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "BESTELLUNG object that needs to add",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BESTELLUNG"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "get": {
        "tags": [
          "BESTELLUNG"
        ],
        "summary": "Get list",
        "description": "",
        "operationId": "getBESTELLUNG",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/BESTELLUNG/{BESTELLUNGId}": {
      "get": {
        "tags": [
          "BESTELLUNG"
        ],
        "summary": "Find BESTELLUNG by ID",
        "description": "Returns a single BESTELLUNG",
        "operationId": "getBESTELLUNGById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "BESTELLUNGId",
            "in": "path",
            "description": "ID of BESTELLUNG to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/BESTELLUNG"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "BESTELLUNG not found"
          }
        }
      },
      "put": {
        "tags": [
          "BESTELLUNG"
        ],
        "summary": "Updates a BESTELLUNG",
        "description": "",
        "operationId": "updateBESTELLUNG",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "BESTELLUNGId",
            "in": "path",
            "description": "ID of BESTELLUNG to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "BESTELLUNG object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BESTELLUNG"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "BESTELLUNG"
        ],
        "summary": "Deletes a BESTELLUNG",
        "description": "",
        "operationId": "deleteBESTELLUNG",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "BESTELLUNGId",
            "in": "path",
            "description": "ID of BESTELLUNG to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "BESTELLUNG not found"
          }
        }
      }
    },
    "/api/v1/BESTELLUNG/bulk": {
      "post": {
        "tags": [
          "BESTELLUNG"
        ],
        "summary": "Bulk BESTELLUNG insert",
        "description": "",
        "operationId": "bulkBESTELLUNGInsert",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "BESTELLUNG objects",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BESTELLUNG"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "put": {
        "tags": [
          "BESTELLUNG"
        ],
        "summary": "Updates a BESTELLUNG",
        "description": "",
        "operationId": "updateBESTELLUNG",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "BESTELLUNG objects with id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BESTELLUNG"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "BESTELLUNG"
        ],
        "summary": "Deletes a BESTELLUNG",
        "description": "",
        "operationId": "deleteBESTELLUNG",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "BESTELLUNG objects contains id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BESTELLUNG"
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "BESTELLUNG not found"
          }
        }
      }
    },
    "/api/v1/BESTELLUNG/findOne": {
      "get": {
        "tags": [
          "BESTELLUNG"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "findOneBESTELLUNG",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/BESTELLUNG"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/BESTELLUNG/{BESTELLUNGId}/exists": {
      "get": {
        "tags": [
          "BESTELLUNG"
        ],
        "summary": "Check BESTELLUNG with provided ID exists",
        "description": "Returns a single BESTELLUNG",
        "operationId": "checkBESTELLUNGExists",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "BESTELLUNGId",
            "in": "path",
            "description": "ID of BESTELLUNG",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/BESTELLUNG/count": {
      "get": {
        "tags": [
          "BESTELLUNG"
        ],
        "summary": "Get BESTELLUNG count",
        "operationId": "getBESTELLUNGCount",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/BESTELLUNG/groupby/{columnName}": {
      "get": {
        "tags": [
          "BESTELLUNG"
        ],
        "summary": "Group by column",
        "description": "",
        "operationId": "BESTELLUNGGroupByColumn",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/BESTELLUNG"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/BESTELLUNG/distribution/{columnName}": {
      "get": {
        "tags": [
          "BESTELLUNG"
        ],
        "summary": "",
        "description": "",
        "operationId": "BESTELLUNGDistribution",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "min",
            "description": "min value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "max",
            "description": "max value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "step",
            "description": "step value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "steps",
            "description": "steps value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "func",
            "description": "comma separated aggregation functions",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/BESTELLUNG/distinct/{columnName}": {
      "get": {
        "tags": [
          "BESTELLUNG"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "BESTELLUNGDistinct",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/BESTELLUNG/aggregate/{columnName}": {
      "get": {
        "tags": [
          "BESTELLUNG"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "BESTELLUNGAggregate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "fields",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "func",
            "type": "String",
            "description": "Comma seperated aggregate functions"
          },
          {
            "in": "query",
            "name": "having",
            "type": "String",
            "description": "Having expression"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/BESTELLUNG"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/ERNAEHRUNGSKATEGORIE/has/KATEGORIE_ZUTAT": {
      "get": {
        "tags": [
          "ERNAEHRUNGSKATEGORIEHasManyKATEGORIE_ZUTAT"
        ],
        "summary": "Get ERNAEHRUNGSKATEGORIE list with KATEGORIE_ZUTAT children",
        "description": "",
        "operationId": "ERNAEHRUNGSKATEGORIEHasManyKATEGORIE_ZUTATList",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields of model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/api/v1/ERNAEHRUNGSKATEGORIE/{ERNAEHRUNGSKATEGORIEId}/KATEGORIE_ZUTAT": {
      "get": {
        "tags": [
          "ERNAEHRUNGSKATEGORIEHasManyKATEGORIE_ZUTAT"
        ],
        "summary": "Find KATEGORIE_ZUTAT list by parent ERNAEHRUNGSKATEGORIE id",
        "description": "Returns a single ERNAEHRUNGSKATEGORIE",
        "operationId": "getKATEGORIE_ZUTATByERNAEHRUNGSKATEGORIEId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "ERNAEHRUNGSKATEGORIEId",
            "in": "path",
            "description": "ID of ERNAEHRUNGSKATEGORIE to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields of model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": "object"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "ERNAEHRUNGSKATEGORIE not found"
          }
        }
      },
      "post": {
        "tags": [
          "ERNAEHRUNGSKATEGORIEHasManyKATEGORIE_ZUTAT"
        ],
        "summary": "Insert KATEGORIE_ZUTAT under a parent ERNAEHRUNGSKATEGORIE",
        "description": "Returns a single ERNAEHRUNGSKATEGORIE",
        "operationId": "insertKATEGORIE_ZUTATByERNAEHRUNGSKATEGORIEId",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "KATEGORIE_ZUTAT object to insert",
            "required": true,
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "ERNAEHRUNGSKATEGORIEId",
            "in": "path",
            "description": "ID of ERNAEHRUNGSKATEGORIE to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/ERNAEHRUNGSKATEGORIE/{ERNAEHRUNGSKATEGORIEId}/KATEGORIE_ZUTAT/{KATEGORIE_ZUTATId}": {
      "get": {
        "tags": [
          "ERNAEHRUNGSKATEGORIEHasManyKATEGORIE_ZUTAT"
        ],
        "summary": "Get by KATEGORIE_ZUTAT id parent ERNAEHRUNGSKATEGORIE id",
        "description": "Returns a single ERNAEHRUNGSKATEGORIE",
        "operationId": "getKATEGORIE_ZUTATByIdAndERNAEHRUNGSKATEGORIEId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "ERNAEHRUNGSKATEGORIEId",
            "in": "path",
            "description": "ID of parent ERNAEHRUNGSKATEGORIE",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "KATEGORIE_ZUTATId",
            "in": "path",
            "description": "ID of KATEGORIE_ZUTAT",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": "object"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "ERNAEHRUNGSKATEGORIEHasManyKATEGORIE_ZUTAT"
        ],
        "summary": "Delete by KATEGORIE_ZUTAT id parent ERNAEHRUNGSKATEGORIE id",
        "description": "Returns a single ERNAEHRUNGSKATEGORIE",
        "operationId": "deleteKATEGORIE_ZUTATByIdAndERNAEHRUNGSKATEGORIEId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "ERNAEHRUNGSKATEGORIEId",
            "in": "path",
            "description": "ID of parent ERNAEHRUNGSKATEGORIE",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "KATEGORIE_ZUTATId",
            "in": "path",
            "description": "ID of cKATEGORIE_ZUTAT",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      },
      "put": {
        "tags": [
          "ERNAEHRUNGSKATEGORIEHasManyKATEGORIE_ZUTAT"
        ],
        "summary": "Update KATEGORIE_ZUTAT under a parent ERNAEHRUNGSKATEGORIE",
        "description": "Returns a single ERNAEHRUNGSKATEGORIE",
        "operationId": "updateKATEGORIE_ZUTATByIdAndERNAEHRUNGSKATEGORIEId",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "KATEGORIE_ZUTAT object to insert",
            "required": true,
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "ERNAEHRUNGSKATEGORIEId",
            "in": "path",
            "description": "ID of ERNAEHRUNGSKATEGORIE to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "KATEGORIE_ZUTATId",
            "in": "path",
            "description": "ID of KATEGORIE_ZUTAT",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/ERNAEHRUNGSKATEGORIE/{ERNAEHRUNGSKATEGORIEId}/KATEGORIE_ZUTAT/{KATEGORIE_ZUTATId}/exists": {
      "get": {
        "tags": [
          "ERNAEHRUNGSKATEGORIEHasManyKATEGORIE_ZUTAT"
        ],
        "summary": "Check row exists by KATEGORIE_ZUTAT id and parent ERNAEHRUNGSKATEGORIE id",
        "description": "",
        "operationId": "existsKATEGORIE_ZUTATByIdAndERNAEHRUNGSKATEGORIEId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "ERNAEHRUNGSKATEGORIEId",
            "in": "path",
            "description": "ID of parent ERNAEHRUNGSKATEGORIE",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "KATEGORIE_ZUTATId",
            "in": "path",
            "description": "ID of KATEGORIE_ZUTAT",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/ERNAEHRUNGSKATEGORIE/{ERNAEHRUNGSKATEGORIEId}/KATEGORIE_ZUTAT/findOne": {
      "get": {
        "tags": [
          "ERNAEHRUNGSKATEGORIEHasManyKATEGORIE_ZUTAT"
        ],
        "summary": "Find one KATEGORIE_ZUTAT by parent ERNAEHRUNGSKATEGORIE id and filters",
        "description": "",
        "operationId": "findOneKATEGORIE_ZUTATByERNAEHRUNGSKATEGORIEId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "ERNAEHRUNGSKATEGORIEId",
            "in": "path",
            "description": "ID of parent ERNAEHRUNGSKATEGORIE",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields of model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/ERNAEHRUNGSKATEGORIE/{ERNAEHRUNGSKATEGORIEId}/KATEGORIE_ZUTAT/count": {
      "get": {
        "tags": [
          "ERNAEHRUNGSKATEGORIEHasManyKATEGORIE_ZUTAT"
        ],
        "summary": "Get KATEGORIE_ZUTAT count by parent id and filter",
        "description": "",
        "operationId": "getCountWithinERNAEHRUNGSKATEGORIEId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "ERNAEHRUNGSKATEGORIEId",
            "in": "path",
            "description": "ID of parent ERNAEHRUNGSKATEGORIE",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/ERNAEHRUNGSKATEGORIE": {
      "post": {
        "tags": [
          "ERNAEHRUNGSKATEGORIE"
        ],
        "summary": "Add a new ERNAEHRUNGSKATEGORIE",
        "description": "",
        "operationId": "addERNAEHRUNGSKATEGORIE",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "ERNAEHRUNGSKATEGORIE object that needs to add",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ERNAEHRUNGSKATEGORIE"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "get": {
        "tags": [
          "ERNAEHRUNGSKATEGORIE"
        ],
        "summary": "Get list",
        "description": "",
        "operationId": "getERNAEHRUNGSKATEGORIE",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/ERNAEHRUNGSKATEGORIE/{ERNAEHRUNGSKATEGORIEId}": {
      "get": {
        "tags": [
          "ERNAEHRUNGSKATEGORIE"
        ],
        "summary": "Find ERNAEHRUNGSKATEGORIE by ID",
        "description": "Returns a single ERNAEHRUNGSKATEGORIE",
        "operationId": "getERNAEHRUNGSKATEGORIEById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "ERNAEHRUNGSKATEGORIEId",
            "in": "path",
            "description": "ID of ERNAEHRUNGSKATEGORIE to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ERNAEHRUNGSKATEGORIE"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "ERNAEHRUNGSKATEGORIE not found"
          }
        }
      },
      "put": {
        "tags": [
          "ERNAEHRUNGSKATEGORIE"
        ],
        "summary": "Updates a ERNAEHRUNGSKATEGORIE",
        "description": "",
        "operationId": "updateERNAEHRUNGSKATEGORIE",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "ERNAEHRUNGSKATEGORIEId",
            "in": "path",
            "description": "ID of ERNAEHRUNGSKATEGORIE to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "ERNAEHRUNGSKATEGORIE object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ERNAEHRUNGSKATEGORIE"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "ERNAEHRUNGSKATEGORIE"
        ],
        "summary": "Deletes a ERNAEHRUNGSKATEGORIE",
        "description": "",
        "operationId": "deleteERNAEHRUNGSKATEGORIE",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "ERNAEHRUNGSKATEGORIEId",
            "in": "path",
            "description": "ID of ERNAEHRUNGSKATEGORIE to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "ERNAEHRUNGSKATEGORIE not found"
          }
        }
      }
    },
    "/api/v1/ERNAEHRUNGSKATEGORIE/bulk": {
      "post": {
        "tags": [
          "ERNAEHRUNGSKATEGORIE"
        ],
        "summary": "Bulk ERNAEHRUNGSKATEGORIE insert",
        "description": "",
        "operationId": "bulkERNAEHRUNGSKATEGORIEInsert",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "ERNAEHRUNGSKATEGORIE objects",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ERNAEHRUNGSKATEGORIE"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "put": {
        "tags": [
          "ERNAEHRUNGSKATEGORIE"
        ],
        "summary": "Updates a ERNAEHRUNGSKATEGORIE",
        "description": "",
        "operationId": "updateERNAEHRUNGSKATEGORIE",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "ERNAEHRUNGSKATEGORIE objects with id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ERNAEHRUNGSKATEGORIE"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "ERNAEHRUNGSKATEGORIE"
        ],
        "summary": "Deletes a ERNAEHRUNGSKATEGORIE",
        "description": "",
        "operationId": "deleteERNAEHRUNGSKATEGORIE",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "ERNAEHRUNGSKATEGORIE objects contains id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ERNAEHRUNGSKATEGORIE"
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "ERNAEHRUNGSKATEGORIE not found"
          }
        }
      }
    },
    "/api/v1/ERNAEHRUNGSKATEGORIE/findOne": {
      "get": {
        "tags": [
          "ERNAEHRUNGSKATEGORIE"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "findOneERNAEHRUNGSKATEGORIE",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ERNAEHRUNGSKATEGORIE"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/ERNAEHRUNGSKATEGORIE/{ERNAEHRUNGSKATEGORIEId}/exists": {
      "get": {
        "tags": [
          "ERNAEHRUNGSKATEGORIE"
        ],
        "summary": "Check ERNAEHRUNGSKATEGORIE with provided ID exists",
        "description": "Returns a single ERNAEHRUNGSKATEGORIE",
        "operationId": "checkERNAEHRUNGSKATEGORIEExists",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "ERNAEHRUNGSKATEGORIEId",
            "in": "path",
            "description": "ID of ERNAEHRUNGSKATEGORIE",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/ERNAEHRUNGSKATEGORIE/count": {
      "get": {
        "tags": [
          "ERNAEHRUNGSKATEGORIE"
        ],
        "summary": "Get ERNAEHRUNGSKATEGORIE count",
        "operationId": "getERNAEHRUNGSKATEGORIECount",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/ERNAEHRUNGSKATEGORIE/groupby/{columnName}": {
      "get": {
        "tags": [
          "ERNAEHRUNGSKATEGORIE"
        ],
        "summary": "Group by column",
        "description": "",
        "operationId": "ERNAEHRUNGSKATEGORIEGroupByColumn",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ERNAEHRUNGSKATEGORIE"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/ERNAEHRUNGSKATEGORIE/distribution/{columnName}": {
      "get": {
        "tags": [
          "ERNAEHRUNGSKATEGORIE"
        ],
        "summary": "",
        "description": "",
        "operationId": "ERNAEHRUNGSKATEGORIEDistribution",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "min",
            "description": "min value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "max",
            "description": "max value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "step",
            "description": "step value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "steps",
            "description": "steps value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "func",
            "description": "comma separated aggregation functions",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/ERNAEHRUNGSKATEGORIE/distinct/{columnName}": {
      "get": {
        "tags": [
          "ERNAEHRUNGSKATEGORIE"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "ERNAEHRUNGSKATEGORIEDistinct",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/ERNAEHRUNGSKATEGORIE/aggregate/{columnName}": {
      "get": {
        "tags": [
          "ERNAEHRUNGSKATEGORIE"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "ERNAEHRUNGSKATEGORIEAggregate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "fields",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "func",
            "type": "String",
            "description": "Comma seperated aggregate functions"
          },
          {
            "in": "query",
            "name": "having",
            "type": "String",
            "description": "Having expression"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ERNAEHRUNGSKATEGORIE"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/KATEGORIE_ZUTAT/belongs/ERNAEHRUNGSKATEGORIE": {
      "get": {
        "tags": [
          "KATEGORIE_ZUTATBelongsToERNAEHRUNGSKATEGORIE"
        ],
        "summary": "Get KATEGORIE_ZUTAT list with ERNAEHRUNGSKATEGORIE parent",
        "description": "",
        "operationId": "KATEGORIE_ZUTATWithParent",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/api/v1/KATEGORIE_ZUTAT/belongs/ZUTAT": {
      "get": {
        "tags": [
          "KATEGORIE_ZUTATBelongsToZUTAT"
        ],
        "summary": "Get KATEGORIE_ZUTAT list with ZUTAT parent",
        "description": "",
        "operationId": "KATEGORIE_ZUTATWithParent",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/api/v1/KATEGORIE_ZUTAT": {
      "post": {
        "tags": [
          "KATEGORIE_ZUTAT"
        ],
        "summary": "Add a new KATEGORIE_ZUTAT",
        "description": "",
        "operationId": "addKATEGORIE_ZUTAT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "KATEGORIE_ZUTAT object that needs to add",
            "required": true,
            "schema": {
              "$ref": "#/definitions/KATEGORIE_ZUTAT"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "get": {
        "tags": [
          "KATEGORIE_ZUTAT"
        ],
        "summary": "Get list",
        "description": "",
        "operationId": "getKATEGORIE_ZUTAT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/KATEGORIE_ZUTAT/{KATEGORIE_ZUTATId}": {
      "get": {
        "tags": [
          "KATEGORIE_ZUTAT"
        ],
        "summary": "Find KATEGORIE_ZUTAT by ID",
        "description": "Returns a single KATEGORIE_ZUTAT",
        "operationId": "getKATEGORIE_ZUTATById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "KATEGORIE_ZUTATId",
            "in": "path",
            "description": "ID of KATEGORIE_ZUTAT to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/KATEGORIE_ZUTAT"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "KATEGORIE_ZUTAT not found"
          }
        }
      },
      "put": {
        "tags": [
          "KATEGORIE_ZUTAT"
        ],
        "summary": "Updates a KATEGORIE_ZUTAT",
        "description": "",
        "operationId": "updateKATEGORIE_ZUTAT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "KATEGORIE_ZUTATId",
            "in": "path",
            "description": "ID of KATEGORIE_ZUTAT to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "KATEGORIE_ZUTAT object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/KATEGORIE_ZUTAT"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "KATEGORIE_ZUTAT"
        ],
        "summary": "Deletes a KATEGORIE_ZUTAT",
        "description": "",
        "operationId": "deleteKATEGORIE_ZUTAT",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "KATEGORIE_ZUTATId",
            "in": "path",
            "description": "ID of KATEGORIE_ZUTAT to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "KATEGORIE_ZUTAT not found"
          }
        }
      }
    },
    "/api/v1/KATEGORIE_ZUTAT/bulk": {
      "post": {
        "tags": [
          "KATEGORIE_ZUTAT"
        ],
        "summary": "Bulk KATEGORIE_ZUTAT insert",
        "description": "",
        "operationId": "bulkKATEGORIE_ZUTATInsert",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "KATEGORIE_ZUTAT objects",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/KATEGORIE_ZUTAT"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "put": {
        "tags": [
          "KATEGORIE_ZUTAT"
        ],
        "summary": "Updates a KATEGORIE_ZUTAT",
        "description": "",
        "operationId": "updateKATEGORIE_ZUTAT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "KATEGORIE_ZUTAT objects with id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/KATEGORIE_ZUTAT"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "KATEGORIE_ZUTAT"
        ],
        "summary": "Deletes a KATEGORIE_ZUTAT",
        "description": "",
        "operationId": "deleteKATEGORIE_ZUTAT",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "KATEGORIE_ZUTAT objects contains id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/KATEGORIE_ZUTAT"
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "KATEGORIE_ZUTAT not found"
          }
        }
      }
    },
    "/api/v1/KATEGORIE_ZUTAT/findOne": {
      "get": {
        "tags": [
          "KATEGORIE_ZUTAT"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "findOneKATEGORIE_ZUTAT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/KATEGORIE_ZUTAT"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/KATEGORIE_ZUTAT/{KATEGORIE_ZUTATId}/exists": {
      "get": {
        "tags": [
          "KATEGORIE_ZUTAT"
        ],
        "summary": "Check KATEGORIE_ZUTAT with provided ID exists",
        "description": "Returns a single KATEGORIE_ZUTAT",
        "operationId": "checkKATEGORIE_ZUTATExists",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "KATEGORIE_ZUTATId",
            "in": "path",
            "description": "ID of KATEGORIE_ZUTAT",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/KATEGORIE_ZUTAT/count": {
      "get": {
        "tags": [
          "KATEGORIE_ZUTAT"
        ],
        "summary": "Get KATEGORIE_ZUTAT count",
        "operationId": "getKATEGORIE_ZUTATCount",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/KATEGORIE_ZUTAT/groupby/{columnName}": {
      "get": {
        "tags": [
          "KATEGORIE_ZUTAT"
        ],
        "summary": "Group by column",
        "description": "",
        "operationId": "KATEGORIE_ZUTATGroupByColumn",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/KATEGORIE_ZUTAT"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/KATEGORIE_ZUTAT/distribution/{columnName}": {
      "get": {
        "tags": [
          "KATEGORIE_ZUTAT"
        ],
        "summary": "",
        "description": "",
        "operationId": "KATEGORIE_ZUTATDistribution",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "min",
            "description": "min value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "max",
            "description": "max value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "step",
            "description": "step value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "steps",
            "description": "steps value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "func",
            "description": "comma separated aggregation functions",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/KATEGORIE_ZUTAT/distinct/{columnName}": {
      "get": {
        "tags": [
          "KATEGORIE_ZUTAT"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "KATEGORIE_ZUTATDistinct",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/KATEGORIE_ZUTAT/aggregate/{columnName}": {
      "get": {
        "tags": [
          "KATEGORIE_ZUTAT"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "KATEGORIE_ZUTATAggregate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "fields",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "func",
            "type": "String",
            "description": "Comma seperated aggregate functions"
          },
          {
            "in": "query",
            "name": "having",
            "type": "String",
            "description": "Having expression"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/KATEGORIE_ZUTAT"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/KRITISCHE_INHALTSSTOFFE/has/ZUTAT_KRITISCHE_INHALTSSTOFFE": {
      "get": {
        "tags": [
          "KRITISCHE_INHALTSSTOFFEHasManyZUTAT_KRITISCHE_INHALTSSTOFFE"
        ],
        "summary": "Get KRITISCHE_INHALTSSTOFFE list with ZUTAT_KRITISCHE_INHALTSSTOFFE children",
        "description": "",
        "operationId": "KRITISCHE_INHALTSSTOFFEHasManyZUTAT_KRITISCHE_INHALTSSTOFFEList",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields of model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/api/v1/KRITISCHE_INHALTSSTOFFE/{KRITISCHE_INHALTSSTOFFEId}/ZUTAT_KRITISCHE_INHALTSSTOFFE": {
      "get": {
        "tags": [
          "KRITISCHE_INHALTSSTOFFEHasManyZUTAT_KRITISCHE_INHALTSSTOFFE"
        ],
        "summary": "Find ZUTAT_KRITISCHE_INHALTSSTOFFE list by parent KRITISCHE_INHALTSSTOFFE id",
        "description": "Returns a single KRITISCHE_INHALTSSTOFFE",
        "operationId": "getZUTAT_KRITISCHE_INHALTSSTOFFEByKRITISCHE_INHALTSSTOFFEId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "KRITISCHE_INHALTSSTOFFEId",
            "in": "path",
            "description": "ID of KRITISCHE_INHALTSSTOFFE to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields of model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": "object"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "KRITISCHE_INHALTSSTOFFE not found"
          }
        }
      },
      "post": {
        "tags": [
          "KRITISCHE_INHALTSSTOFFEHasManyZUTAT_KRITISCHE_INHALTSSTOFFE"
        ],
        "summary": "Insert ZUTAT_KRITISCHE_INHALTSSTOFFE under a parent KRITISCHE_INHALTSSTOFFE",
        "description": "Returns a single KRITISCHE_INHALTSSTOFFE",
        "operationId": "insertZUTAT_KRITISCHE_INHALTSSTOFFEByKRITISCHE_INHALTSSTOFFEId",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "ZUTAT_KRITISCHE_INHALTSSTOFFE object to insert",
            "required": true,
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "KRITISCHE_INHALTSSTOFFEId",
            "in": "path",
            "description": "ID of KRITISCHE_INHALTSSTOFFE to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/KRITISCHE_INHALTSSTOFFE/{KRITISCHE_INHALTSSTOFFEId}/ZUTAT_KRITISCHE_INHALTSSTOFFE/{ZUTAT_KRITISCHE_INHALTSSTOFFEId}": {
      "get": {
        "tags": [
          "KRITISCHE_INHALTSSTOFFEHasManyZUTAT_KRITISCHE_INHALTSSTOFFE"
        ],
        "summary": "Get by ZUTAT_KRITISCHE_INHALTSSTOFFE id parent KRITISCHE_INHALTSSTOFFE id",
        "description": "Returns a single KRITISCHE_INHALTSSTOFFE",
        "operationId": "getZUTAT_KRITISCHE_INHALTSSTOFFEByIdAndKRITISCHE_INHALTSSTOFFEId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "KRITISCHE_INHALTSSTOFFEId",
            "in": "path",
            "description": "ID of parent KRITISCHE_INHALTSSTOFFE",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "ZUTAT_KRITISCHE_INHALTSSTOFFEId",
            "in": "path",
            "description": "ID of ZUTAT_KRITISCHE_INHALTSSTOFFE",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": "object"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "KRITISCHE_INHALTSSTOFFEHasManyZUTAT_KRITISCHE_INHALTSSTOFFE"
        ],
        "summary": "Delete by ZUTAT_KRITISCHE_INHALTSSTOFFE id parent KRITISCHE_INHALTSSTOFFE id",
        "description": "Returns a single KRITISCHE_INHALTSSTOFFE",
        "operationId": "deleteZUTAT_KRITISCHE_INHALTSSTOFFEByIdAndKRITISCHE_INHALTSSTOFFEId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "KRITISCHE_INHALTSSTOFFEId",
            "in": "path",
            "description": "ID of parent KRITISCHE_INHALTSSTOFFE",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "ZUTAT_KRITISCHE_INHALTSSTOFFEId",
            "in": "path",
            "description": "ID of cZUTAT_KRITISCHE_INHALTSSTOFFE",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      },
      "put": {
        "tags": [
          "KRITISCHE_INHALTSSTOFFEHasManyZUTAT_KRITISCHE_INHALTSSTOFFE"
        ],
        "summary": "Update ZUTAT_KRITISCHE_INHALTSSTOFFE under a parent KRITISCHE_INHALTSSTOFFE",
        "description": "Returns a single KRITISCHE_INHALTSSTOFFE",
        "operationId": "updateZUTAT_KRITISCHE_INHALTSSTOFFEByIdAndKRITISCHE_INHALTSSTOFFEId",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "ZUTAT_KRITISCHE_INHALTSSTOFFE object to insert",
            "required": true,
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "KRITISCHE_INHALTSSTOFFEId",
            "in": "path",
            "description": "ID of KRITISCHE_INHALTSSTOFFE to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "ZUTAT_KRITISCHE_INHALTSSTOFFEId",
            "in": "path",
            "description": "ID of ZUTAT_KRITISCHE_INHALTSSTOFFE",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/KRITISCHE_INHALTSSTOFFE/{KRITISCHE_INHALTSSTOFFEId}/ZUTAT_KRITISCHE_INHALTSSTOFFE/{ZUTAT_KRITISCHE_INHALTSSTOFFEId}/exists": {
      "get": {
        "tags": [
          "KRITISCHE_INHALTSSTOFFEHasManyZUTAT_KRITISCHE_INHALTSSTOFFE"
        ],
        "summary": "Check row exists by ZUTAT_KRITISCHE_INHALTSSTOFFE id and parent KRITISCHE_INHALTSSTOFFE id",
        "description": "",
        "operationId": "existsZUTAT_KRITISCHE_INHALTSSTOFFEByIdAndKRITISCHE_INHALTSSTOFFEId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "KRITISCHE_INHALTSSTOFFEId",
            "in": "path",
            "description": "ID of parent KRITISCHE_INHALTSSTOFFE",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "ZUTAT_KRITISCHE_INHALTSSTOFFEId",
            "in": "path",
            "description": "ID of ZUTAT_KRITISCHE_INHALTSSTOFFE",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/KRITISCHE_INHALTSSTOFFE/{KRITISCHE_INHALTSSTOFFEId}/ZUTAT_KRITISCHE_INHALTSSTOFFE/findOne": {
      "get": {
        "tags": [
          "KRITISCHE_INHALTSSTOFFEHasManyZUTAT_KRITISCHE_INHALTSSTOFFE"
        ],
        "summary": "Find one ZUTAT_KRITISCHE_INHALTSSTOFFE by parent KRITISCHE_INHALTSSTOFFE id and filters",
        "description": "",
        "operationId": "findOneZUTAT_KRITISCHE_INHALTSSTOFFEByKRITISCHE_INHALTSSTOFFEId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "KRITISCHE_INHALTSSTOFFEId",
            "in": "path",
            "description": "ID of parent KRITISCHE_INHALTSSTOFFE",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields of model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/KRITISCHE_INHALTSSTOFFE/{KRITISCHE_INHALTSSTOFFEId}/ZUTAT_KRITISCHE_INHALTSSTOFFE/count": {
      "get": {
        "tags": [
          "KRITISCHE_INHALTSSTOFFEHasManyZUTAT_KRITISCHE_INHALTSSTOFFE"
        ],
        "summary": "Get ZUTAT_KRITISCHE_INHALTSSTOFFE count by parent id and filter",
        "description": "",
        "operationId": "getCountWithinKRITISCHE_INHALTSSTOFFEId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "KRITISCHE_INHALTSSTOFFEId",
            "in": "path",
            "description": "ID of parent KRITISCHE_INHALTSSTOFFE",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/KRITISCHE_INHALTSSTOFFE": {
      "post": {
        "tags": [
          "KRITISCHE_INHALTSSTOFFE"
        ],
        "summary": "Add a new KRITISCHE_INHALTSSTOFFE",
        "description": "",
        "operationId": "addKRITISCHE_INHALTSSTOFFE",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "KRITISCHE_INHALTSSTOFFE object that needs to add",
            "required": true,
            "schema": {
              "$ref": "#/definitions/KRITISCHE_INHALTSSTOFFE"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "get": {
        "tags": [
          "KRITISCHE_INHALTSSTOFFE"
        ],
        "summary": "Get list",
        "description": "",
        "operationId": "getKRITISCHE_INHALTSSTOFFE",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/KRITISCHE_INHALTSSTOFFE/{KRITISCHE_INHALTSSTOFFEId}": {
      "get": {
        "tags": [
          "KRITISCHE_INHALTSSTOFFE"
        ],
        "summary": "Find KRITISCHE_INHALTSSTOFFE by ID",
        "description": "Returns a single KRITISCHE_INHALTSSTOFFE",
        "operationId": "getKRITISCHE_INHALTSSTOFFEById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "KRITISCHE_INHALTSSTOFFEId",
            "in": "path",
            "description": "ID of KRITISCHE_INHALTSSTOFFE to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/KRITISCHE_INHALTSSTOFFE"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "KRITISCHE_INHALTSSTOFFE not found"
          }
        }
      },
      "put": {
        "tags": [
          "KRITISCHE_INHALTSSTOFFE"
        ],
        "summary": "Updates a KRITISCHE_INHALTSSTOFFE",
        "description": "",
        "operationId": "updateKRITISCHE_INHALTSSTOFFE",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "KRITISCHE_INHALTSSTOFFEId",
            "in": "path",
            "description": "ID of KRITISCHE_INHALTSSTOFFE to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "KRITISCHE_INHALTSSTOFFE object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/KRITISCHE_INHALTSSTOFFE"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "KRITISCHE_INHALTSSTOFFE"
        ],
        "summary": "Deletes a KRITISCHE_INHALTSSTOFFE",
        "description": "",
        "operationId": "deleteKRITISCHE_INHALTSSTOFFE",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "KRITISCHE_INHALTSSTOFFEId",
            "in": "path",
            "description": "ID of KRITISCHE_INHALTSSTOFFE to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "KRITISCHE_INHALTSSTOFFE not found"
          }
        }
      }
    },
    "/api/v1/KRITISCHE_INHALTSSTOFFE/bulk": {
      "post": {
        "tags": [
          "KRITISCHE_INHALTSSTOFFE"
        ],
        "summary": "Bulk KRITISCHE_INHALTSSTOFFE insert",
        "description": "",
        "operationId": "bulkKRITISCHE_INHALTSSTOFFEInsert",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "KRITISCHE_INHALTSSTOFFE objects",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/KRITISCHE_INHALTSSTOFFE"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "put": {
        "tags": [
          "KRITISCHE_INHALTSSTOFFE"
        ],
        "summary": "Updates a KRITISCHE_INHALTSSTOFFE",
        "description": "",
        "operationId": "updateKRITISCHE_INHALTSSTOFFE",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "KRITISCHE_INHALTSSTOFFE objects with id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/KRITISCHE_INHALTSSTOFFE"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "KRITISCHE_INHALTSSTOFFE"
        ],
        "summary": "Deletes a KRITISCHE_INHALTSSTOFFE",
        "description": "",
        "operationId": "deleteKRITISCHE_INHALTSSTOFFE",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "KRITISCHE_INHALTSSTOFFE objects contains id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/KRITISCHE_INHALTSSTOFFE"
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "KRITISCHE_INHALTSSTOFFE not found"
          }
        }
      }
    },
    "/api/v1/KRITISCHE_INHALTSSTOFFE/findOne": {
      "get": {
        "tags": [
          "KRITISCHE_INHALTSSTOFFE"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "findOneKRITISCHE_INHALTSSTOFFE",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/KRITISCHE_INHALTSSTOFFE"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/KRITISCHE_INHALTSSTOFFE/{KRITISCHE_INHALTSSTOFFEId}/exists": {
      "get": {
        "tags": [
          "KRITISCHE_INHALTSSTOFFE"
        ],
        "summary": "Check KRITISCHE_INHALTSSTOFFE with provided ID exists",
        "description": "Returns a single KRITISCHE_INHALTSSTOFFE",
        "operationId": "checkKRITISCHE_INHALTSSTOFFEExists",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "KRITISCHE_INHALTSSTOFFEId",
            "in": "path",
            "description": "ID of KRITISCHE_INHALTSSTOFFE",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/KRITISCHE_INHALTSSTOFFE/count": {
      "get": {
        "tags": [
          "KRITISCHE_INHALTSSTOFFE"
        ],
        "summary": "Get KRITISCHE_INHALTSSTOFFE count",
        "operationId": "getKRITISCHE_INHALTSSTOFFECount",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/KRITISCHE_INHALTSSTOFFE/groupby/{columnName}": {
      "get": {
        "tags": [
          "KRITISCHE_INHALTSSTOFFE"
        ],
        "summary": "Group by column",
        "description": "",
        "operationId": "KRITISCHE_INHALTSSTOFFEGroupByColumn",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/KRITISCHE_INHALTSSTOFFE"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/KRITISCHE_INHALTSSTOFFE/distribution/{columnName}": {
      "get": {
        "tags": [
          "KRITISCHE_INHALTSSTOFFE"
        ],
        "summary": "",
        "description": "",
        "operationId": "KRITISCHE_INHALTSSTOFFEDistribution",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "min",
            "description": "min value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "max",
            "description": "max value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "step",
            "description": "step value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "steps",
            "description": "steps value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "func",
            "description": "comma separated aggregation functions",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/KRITISCHE_INHALTSSTOFFE/distinct/{columnName}": {
      "get": {
        "tags": [
          "KRITISCHE_INHALTSSTOFFE"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "KRITISCHE_INHALTSSTOFFEDistinct",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/KRITISCHE_INHALTSSTOFFE/aggregate/{columnName}": {
      "get": {
        "tags": [
          "KRITISCHE_INHALTSSTOFFE"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "KRITISCHE_INHALTSSTOFFEAggregate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "fields",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "func",
            "type": "String",
            "description": "Comma seperated aggregate functions"
          },
          {
            "in": "query",
            "name": "having",
            "type": "String",
            "description": "Having expression"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/KRITISCHE_INHALTSSTOFFE"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/KUNDE/has/BESTELLUNG": {
      "get": {
        "tags": [
          "KUNDEHasManyBESTELLUNG"
        ],
        "summary": "Get KUNDE list with BESTELLUNG children",
        "description": "",
        "operationId": "KUNDEHasManyBESTELLUNGList",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields of model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/api/v1/KUNDE/{KUNDEId}/BESTELLUNG": {
      "get": {
        "tags": [
          "KUNDEHasManyBESTELLUNG"
        ],
        "summary": "Find BESTELLUNG list by parent KUNDE id",
        "description": "Returns a single KUNDE",
        "operationId": "getBESTELLUNGByKUNDEId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "KUNDEId",
            "in": "path",
            "description": "ID of KUNDE to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields of model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": "object"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "KUNDE not found"
          }
        }
      },
      "post": {
        "tags": [
          "KUNDEHasManyBESTELLUNG"
        ],
        "summary": "Insert BESTELLUNG under a parent KUNDE",
        "description": "Returns a single KUNDE",
        "operationId": "insertBESTELLUNGByKUNDEId",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "BESTELLUNG object to insert",
            "required": true,
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "KUNDEId",
            "in": "path",
            "description": "ID of KUNDE to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/KUNDE/{KUNDEId}/BESTELLUNG/{BESTELLUNGId}": {
      "get": {
        "tags": [
          "KUNDEHasManyBESTELLUNG"
        ],
        "summary": "Get by BESTELLUNG id parent KUNDE id",
        "description": "Returns a single KUNDE",
        "operationId": "getBESTELLUNGByIdAndKUNDEId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "KUNDEId",
            "in": "path",
            "description": "ID of parent KUNDE",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "BESTELLUNGId",
            "in": "path",
            "description": "ID of BESTELLUNG",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": "object"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "KUNDEHasManyBESTELLUNG"
        ],
        "summary": "Delete by BESTELLUNG id parent KUNDE id",
        "description": "Returns a single KUNDE",
        "operationId": "deleteBESTELLUNGByIdAndKUNDEId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "KUNDEId",
            "in": "path",
            "description": "ID of parent KUNDE",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "BESTELLUNGId",
            "in": "path",
            "description": "ID of cBESTELLUNG",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      },
      "put": {
        "tags": [
          "KUNDEHasManyBESTELLUNG"
        ],
        "summary": "Update BESTELLUNG under a parent KUNDE",
        "description": "Returns a single KUNDE",
        "operationId": "updateBESTELLUNGByIdAndKUNDEId",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "BESTELLUNG object to insert",
            "required": true,
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "KUNDEId",
            "in": "path",
            "description": "ID of KUNDE to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "BESTELLUNGId",
            "in": "path",
            "description": "ID of BESTELLUNG",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/KUNDE/{KUNDEId}/BESTELLUNG/{BESTELLUNGId}/exists": {
      "get": {
        "tags": [
          "KUNDEHasManyBESTELLUNG"
        ],
        "summary": "Check row exists by BESTELLUNG id and parent KUNDE id",
        "description": "",
        "operationId": "existsBESTELLUNGByIdAndKUNDEId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "KUNDEId",
            "in": "path",
            "description": "ID of parent KUNDE",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "BESTELLUNGId",
            "in": "path",
            "description": "ID of BESTELLUNG",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/KUNDE/{KUNDEId}/BESTELLUNG/findOne": {
      "get": {
        "tags": [
          "KUNDEHasManyBESTELLUNG"
        ],
        "summary": "Find one BESTELLUNG by parent KUNDE id and filters",
        "description": "",
        "operationId": "findOneBESTELLUNGByKUNDEId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "KUNDEId",
            "in": "path",
            "description": "ID of parent KUNDE",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields of model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/KUNDE/{KUNDEId}/BESTELLUNG/count": {
      "get": {
        "tags": [
          "KUNDEHasManyBESTELLUNG"
        ],
        "summary": "Get BESTELLUNG count by parent id and filter",
        "description": "",
        "operationId": "getCountWithinKUNDEId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "KUNDEId",
            "in": "path",
            "description": "ID of parent KUNDE",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/KUNDE": {
      "post": {
        "tags": [
          "KUNDE"
        ],
        "summary": "Add a new KUNDE",
        "description": "",
        "operationId": "addKUNDE",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "KUNDE object that needs to add",
            "required": true,
            "schema": {
              "$ref": "#/definitions/KUNDE"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "get": {
        "tags": [
          "KUNDE"
        ],
        "summary": "Get list",
        "description": "",
        "operationId": "getKUNDE",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/KUNDE/{KUNDEId}": {
      "get": {
        "tags": [
          "KUNDE"
        ],
        "summary": "Find KUNDE by ID",
        "description": "Returns a single KUNDE",
        "operationId": "getKUNDEById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "KUNDEId",
            "in": "path",
            "description": "ID of KUNDE to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/KUNDE"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "KUNDE not found"
          }
        }
      },
      "put": {
        "tags": [
          "KUNDE"
        ],
        "summary": "Updates a KUNDE",
        "description": "",
        "operationId": "updateKUNDE",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "KUNDEId",
            "in": "path",
            "description": "ID of KUNDE to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "KUNDE object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/KUNDE"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "KUNDE"
        ],
        "summary": "Deletes a KUNDE",
        "description": "",
        "operationId": "deleteKUNDE",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "KUNDEId",
            "in": "path",
            "description": "ID of KUNDE to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "KUNDE not found"
          }
        }
      }
    },
    "/api/v1/KUNDE/bulk": {
      "post": {
        "tags": [
          "KUNDE"
        ],
        "summary": "Bulk KUNDE insert",
        "description": "",
        "operationId": "bulkKUNDEInsert",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "KUNDE objects",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/KUNDE"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "put": {
        "tags": [
          "KUNDE"
        ],
        "summary": "Updates a KUNDE",
        "description": "",
        "operationId": "updateKUNDE",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "KUNDE objects with id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/KUNDE"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "KUNDE"
        ],
        "summary": "Deletes a KUNDE",
        "description": "",
        "operationId": "deleteKUNDE",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "KUNDE objects contains id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/KUNDE"
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "KUNDE not found"
          }
        }
      }
    },
    "/api/v1/KUNDE/findOne": {
      "get": {
        "tags": [
          "KUNDE"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "findOneKUNDE",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/KUNDE"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/KUNDE/{KUNDEId}/exists": {
      "get": {
        "tags": [
          "KUNDE"
        ],
        "summary": "Check KUNDE with provided ID exists",
        "description": "Returns a single KUNDE",
        "operationId": "checkKUNDEExists",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "KUNDEId",
            "in": "path",
            "description": "ID of KUNDE",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/KUNDE/count": {
      "get": {
        "tags": [
          "KUNDE"
        ],
        "summary": "Get KUNDE count",
        "operationId": "getKUNDECount",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/KUNDE/groupby/{columnName}": {
      "get": {
        "tags": [
          "KUNDE"
        ],
        "summary": "Group by column",
        "description": "",
        "operationId": "KUNDEGroupByColumn",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/KUNDE"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/KUNDE/distribution/{columnName}": {
      "get": {
        "tags": [
          "KUNDE"
        ],
        "summary": "",
        "description": "",
        "operationId": "KUNDEDistribution",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "min",
            "description": "min value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "max",
            "description": "max value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "step",
            "description": "step value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "steps",
            "description": "steps value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "func",
            "description": "comma separated aggregation functions",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/KUNDE/distinct/{columnName}": {
      "get": {
        "tags": [
          "KUNDE"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "KUNDEDistinct",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/KUNDE/aggregate/{columnName}": {
      "get": {
        "tags": [
          "KUNDE"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "KUNDEAggregate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "fields",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "func",
            "type": "String",
            "description": "Comma seperated aggregate functions"
          },
          {
            "in": "query",
            "name": "having",
            "type": "String",
            "description": "Having expression"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/KUNDE"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/LIEFERANT_SENDUNG/belongs/LIEFERANT": {
      "get": {
        "tags": [
          "LIEFERANT_SENDUNGBelongsToLIEFERANT"
        ],
        "summary": "Get LIEFERANT_SENDUNG list with LIEFERANT parent",
        "description": "",
        "operationId": "LIEFERANT_SENDUNGWithParent",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/api/v1/LIEFERANT_SENDUNG/belongs/SENDUNG": {
      "get": {
        "tags": [
          "LIEFERANT_SENDUNGBelongsToSENDUNG"
        ],
        "summary": "Get LIEFERANT_SENDUNG list with SENDUNG parent",
        "description": "",
        "operationId": "LIEFERANT_SENDUNGWithParent",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/api/v1/LIEFERANT_SENDUNG": {
      "post": {
        "tags": [
          "LIEFERANT_SENDUNG"
        ],
        "summary": "Add a new LIEFERANT_SENDUNG",
        "description": "",
        "operationId": "addLIEFERANT_SENDUNG",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "LIEFERANT_SENDUNG object that needs to add",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LIEFERANT_SENDUNG"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "get": {
        "tags": [
          "LIEFERANT_SENDUNG"
        ],
        "summary": "Get list",
        "description": "",
        "operationId": "getLIEFERANT_SENDUNG",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/LIEFERANT_SENDUNG/{LIEFERANT_SENDUNGId}": {
      "get": {
        "tags": [
          "LIEFERANT_SENDUNG"
        ],
        "summary": "Find LIEFERANT_SENDUNG by ID",
        "description": "Returns a single LIEFERANT_SENDUNG",
        "operationId": "getLIEFERANT_SENDUNGById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "LIEFERANT_SENDUNGId",
            "in": "path",
            "description": "ID of LIEFERANT_SENDUNG to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/LIEFERANT_SENDUNG"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "LIEFERANT_SENDUNG not found"
          }
        }
      },
      "put": {
        "tags": [
          "LIEFERANT_SENDUNG"
        ],
        "summary": "Updates a LIEFERANT_SENDUNG",
        "description": "",
        "operationId": "updateLIEFERANT_SENDUNG",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "LIEFERANT_SENDUNGId",
            "in": "path",
            "description": "ID of LIEFERANT_SENDUNG to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "LIEFERANT_SENDUNG object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LIEFERANT_SENDUNG"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "LIEFERANT_SENDUNG"
        ],
        "summary": "Deletes a LIEFERANT_SENDUNG",
        "description": "",
        "operationId": "deleteLIEFERANT_SENDUNG",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "LIEFERANT_SENDUNGId",
            "in": "path",
            "description": "ID of LIEFERANT_SENDUNG to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "LIEFERANT_SENDUNG not found"
          }
        }
      }
    },
    "/api/v1/LIEFERANT_SENDUNG/bulk": {
      "post": {
        "tags": [
          "LIEFERANT_SENDUNG"
        ],
        "summary": "Bulk LIEFERANT_SENDUNG insert",
        "description": "",
        "operationId": "bulkLIEFERANT_SENDUNGInsert",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "LIEFERANT_SENDUNG objects",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/LIEFERANT_SENDUNG"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "put": {
        "tags": [
          "LIEFERANT_SENDUNG"
        ],
        "summary": "Updates a LIEFERANT_SENDUNG",
        "description": "",
        "operationId": "updateLIEFERANT_SENDUNG",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "LIEFERANT_SENDUNG objects with id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/LIEFERANT_SENDUNG"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "LIEFERANT_SENDUNG"
        ],
        "summary": "Deletes a LIEFERANT_SENDUNG",
        "description": "",
        "operationId": "deleteLIEFERANT_SENDUNG",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "LIEFERANT_SENDUNG objects contains id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/LIEFERANT_SENDUNG"
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "LIEFERANT_SENDUNG not found"
          }
        }
      }
    },
    "/api/v1/LIEFERANT_SENDUNG/findOne": {
      "get": {
        "tags": [
          "LIEFERANT_SENDUNG"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "findOneLIEFERANT_SENDUNG",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/LIEFERANT_SENDUNG"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/LIEFERANT_SENDUNG/{LIEFERANT_SENDUNGId}/exists": {
      "get": {
        "tags": [
          "LIEFERANT_SENDUNG"
        ],
        "summary": "Check LIEFERANT_SENDUNG with provided ID exists",
        "description": "Returns a single LIEFERANT_SENDUNG",
        "operationId": "checkLIEFERANT_SENDUNGExists",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "LIEFERANT_SENDUNGId",
            "in": "path",
            "description": "ID of LIEFERANT_SENDUNG",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/LIEFERANT_SENDUNG/count": {
      "get": {
        "tags": [
          "LIEFERANT_SENDUNG"
        ],
        "summary": "Get LIEFERANT_SENDUNG count",
        "operationId": "getLIEFERANT_SENDUNGCount",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/LIEFERANT_SENDUNG/groupby/{columnName}": {
      "get": {
        "tags": [
          "LIEFERANT_SENDUNG"
        ],
        "summary": "Group by column",
        "description": "",
        "operationId": "LIEFERANT_SENDUNGGroupByColumn",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/LIEFERANT_SENDUNG"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/LIEFERANT_SENDUNG/distribution/{columnName}": {
      "get": {
        "tags": [
          "LIEFERANT_SENDUNG"
        ],
        "summary": "",
        "description": "",
        "operationId": "LIEFERANT_SENDUNGDistribution",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "min",
            "description": "min value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "max",
            "description": "max value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "step",
            "description": "step value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "steps",
            "description": "steps value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "func",
            "description": "comma separated aggregation functions",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/LIEFERANT_SENDUNG/distinct/{columnName}": {
      "get": {
        "tags": [
          "LIEFERANT_SENDUNG"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "LIEFERANT_SENDUNGDistinct",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/LIEFERANT_SENDUNG/aggregate/{columnName}": {
      "get": {
        "tags": [
          "LIEFERANT_SENDUNG"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "LIEFERANT_SENDUNGAggregate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "fields",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "func",
            "type": "String",
            "description": "Comma seperated aggregate functions"
          },
          {
            "in": "query",
            "name": "having",
            "type": "String",
            "description": "Having expression"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/LIEFERANT_SENDUNG"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/LIEFERANT/has/LIEFERANT_SENDUNG": {
      "get": {
        "tags": [
          "LIEFERANTHasManyLIEFERANT_SENDUNG"
        ],
        "summary": "Get LIEFERANT list with LIEFERANT_SENDUNG children",
        "description": "",
        "operationId": "LIEFERANTHasManyLIEFERANT_SENDUNGList",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields of model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/api/v1/LIEFERANT/{LIEFERANTId}/LIEFERANT_SENDUNG": {
      "get": {
        "tags": [
          "LIEFERANTHasManyLIEFERANT_SENDUNG"
        ],
        "summary": "Find LIEFERANT_SENDUNG list by parent LIEFERANT id",
        "description": "Returns a single LIEFERANT",
        "operationId": "getLIEFERANT_SENDUNGByLIEFERANTId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "LIEFERANTId",
            "in": "path",
            "description": "ID of LIEFERANT to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields of model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": "object"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "LIEFERANT not found"
          }
        }
      },
      "post": {
        "tags": [
          "LIEFERANTHasManyLIEFERANT_SENDUNG"
        ],
        "summary": "Insert LIEFERANT_SENDUNG under a parent LIEFERANT",
        "description": "Returns a single LIEFERANT",
        "operationId": "insertLIEFERANT_SENDUNGByLIEFERANTId",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "LIEFERANT_SENDUNG object to insert",
            "required": true,
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "LIEFERANTId",
            "in": "path",
            "description": "ID of LIEFERANT to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/LIEFERANT/{LIEFERANTId}/LIEFERANT_SENDUNG/{LIEFERANT_SENDUNGId}": {
      "get": {
        "tags": [
          "LIEFERANTHasManyLIEFERANT_SENDUNG"
        ],
        "summary": "Get by LIEFERANT_SENDUNG id parent LIEFERANT id",
        "description": "Returns a single LIEFERANT",
        "operationId": "getLIEFERANT_SENDUNGByIdAndLIEFERANTId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "LIEFERANTId",
            "in": "path",
            "description": "ID of parent LIEFERANT",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "LIEFERANT_SENDUNGId",
            "in": "path",
            "description": "ID of LIEFERANT_SENDUNG",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": "object"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "LIEFERANTHasManyLIEFERANT_SENDUNG"
        ],
        "summary": "Delete by LIEFERANT_SENDUNG id parent LIEFERANT id",
        "description": "Returns a single LIEFERANT",
        "operationId": "deleteLIEFERANT_SENDUNGByIdAndLIEFERANTId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "LIEFERANTId",
            "in": "path",
            "description": "ID of parent LIEFERANT",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "LIEFERANT_SENDUNGId",
            "in": "path",
            "description": "ID of cLIEFERANT_SENDUNG",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      },
      "put": {
        "tags": [
          "LIEFERANTHasManyLIEFERANT_SENDUNG"
        ],
        "summary": "Update LIEFERANT_SENDUNG under a parent LIEFERANT",
        "description": "Returns a single LIEFERANT",
        "operationId": "updateLIEFERANT_SENDUNGByIdAndLIEFERANTId",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "LIEFERANT_SENDUNG object to insert",
            "required": true,
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "LIEFERANTId",
            "in": "path",
            "description": "ID of LIEFERANT to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "LIEFERANT_SENDUNGId",
            "in": "path",
            "description": "ID of LIEFERANT_SENDUNG",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/LIEFERANT/{LIEFERANTId}/LIEFERANT_SENDUNG/{LIEFERANT_SENDUNGId}/exists": {
      "get": {
        "tags": [
          "LIEFERANTHasManyLIEFERANT_SENDUNG"
        ],
        "summary": "Check row exists by LIEFERANT_SENDUNG id and parent LIEFERANT id",
        "description": "",
        "operationId": "existsLIEFERANT_SENDUNGByIdAndLIEFERANTId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "LIEFERANTId",
            "in": "path",
            "description": "ID of parent LIEFERANT",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "LIEFERANT_SENDUNGId",
            "in": "path",
            "description": "ID of LIEFERANT_SENDUNG",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/LIEFERANT/{LIEFERANTId}/LIEFERANT_SENDUNG/findOne": {
      "get": {
        "tags": [
          "LIEFERANTHasManyLIEFERANT_SENDUNG"
        ],
        "summary": "Find one LIEFERANT_SENDUNG by parent LIEFERANT id and filters",
        "description": "",
        "operationId": "findOneLIEFERANT_SENDUNGByLIEFERANTId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "LIEFERANTId",
            "in": "path",
            "description": "ID of parent LIEFERANT",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields of model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/LIEFERANT/{LIEFERANTId}/LIEFERANT_SENDUNG/count": {
      "get": {
        "tags": [
          "LIEFERANTHasManyLIEFERANT_SENDUNG"
        ],
        "summary": "Get LIEFERANT_SENDUNG count by parent id and filter",
        "description": "",
        "operationId": "getCountWithinLIEFERANTId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "LIEFERANTId",
            "in": "path",
            "description": "ID of parent LIEFERANT",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/LIEFERANT": {
      "post": {
        "tags": [
          "LIEFERANT"
        ],
        "summary": "Add a new LIEFERANT",
        "description": "",
        "operationId": "addLIEFERANT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "LIEFERANT object that needs to add",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LIEFERANT"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "get": {
        "tags": [
          "LIEFERANT"
        ],
        "summary": "Get list",
        "description": "",
        "operationId": "getLIEFERANT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/LIEFERANT/{LIEFERANTId}": {
      "get": {
        "tags": [
          "LIEFERANT"
        ],
        "summary": "Find LIEFERANT by ID",
        "description": "Returns a single LIEFERANT",
        "operationId": "getLIEFERANTById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "LIEFERANTId",
            "in": "path",
            "description": "ID of LIEFERANT to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/LIEFERANT"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "LIEFERANT not found"
          }
        }
      },
      "put": {
        "tags": [
          "LIEFERANT"
        ],
        "summary": "Updates a LIEFERANT",
        "description": "",
        "operationId": "updateLIEFERANT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "LIEFERANTId",
            "in": "path",
            "description": "ID of LIEFERANT to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "LIEFERANT object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LIEFERANT"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "LIEFERANT"
        ],
        "summary": "Deletes a LIEFERANT",
        "description": "",
        "operationId": "deleteLIEFERANT",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "LIEFERANTId",
            "in": "path",
            "description": "ID of LIEFERANT to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "LIEFERANT not found"
          }
        }
      }
    },
    "/api/v1/LIEFERANT/bulk": {
      "post": {
        "tags": [
          "LIEFERANT"
        ],
        "summary": "Bulk LIEFERANT insert",
        "description": "",
        "operationId": "bulkLIEFERANTInsert",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "LIEFERANT objects",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/LIEFERANT"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "put": {
        "tags": [
          "LIEFERANT"
        ],
        "summary": "Updates a LIEFERANT",
        "description": "",
        "operationId": "updateLIEFERANT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "LIEFERANT objects with id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/LIEFERANT"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "LIEFERANT"
        ],
        "summary": "Deletes a LIEFERANT",
        "description": "",
        "operationId": "deleteLIEFERANT",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "LIEFERANT objects contains id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/LIEFERANT"
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "LIEFERANT not found"
          }
        }
      }
    },
    "/api/v1/LIEFERANT/findOne": {
      "get": {
        "tags": [
          "LIEFERANT"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "findOneLIEFERANT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/LIEFERANT"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/LIEFERANT/{LIEFERANTId}/exists": {
      "get": {
        "tags": [
          "LIEFERANT"
        ],
        "summary": "Check LIEFERANT with provided ID exists",
        "description": "Returns a single LIEFERANT",
        "operationId": "checkLIEFERANTExists",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "LIEFERANTId",
            "in": "path",
            "description": "ID of LIEFERANT",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/LIEFERANT/count": {
      "get": {
        "tags": [
          "LIEFERANT"
        ],
        "summary": "Get LIEFERANT count",
        "operationId": "getLIEFERANTCount",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/LIEFERANT/groupby/{columnName}": {
      "get": {
        "tags": [
          "LIEFERANT"
        ],
        "summary": "Group by column",
        "description": "",
        "operationId": "LIEFERANTGroupByColumn",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/LIEFERANT"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/LIEFERANT/distribution/{columnName}": {
      "get": {
        "tags": [
          "LIEFERANT"
        ],
        "summary": "",
        "description": "",
        "operationId": "LIEFERANTDistribution",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "min",
            "description": "min value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "max",
            "description": "max value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "step",
            "description": "step value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "steps",
            "description": "steps value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "func",
            "description": "comma separated aggregation functions",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/LIEFERANT/distinct/{columnName}": {
      "get": {
        "tags": [
          "LIEFERANT"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "LIEFERANTDistinct",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/LIEFERANT/aggregate/{columnName}": {
      "get": {
        "tags": [
          "LIEFERANT"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "LIEFERANTAggregate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "fields",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "func",
            "type": "String",
            "description": "Comma seperated aggregate functions"
          },
          {
            "in": "query",
            "name": "having",
            "type": "String",
            "description": "Having expression"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/LIEFERANT"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/REZEPT/has/BESTELLUNG_REZEPT": {
      "get": {
        "tags": [
          "REZEPTHasManyBESTELLUNG_REZEPT"
        ],
        "summary": "Get REZEPT list with BESTELLUNG_REZEPT children",
        "description": "",
        "operationId": "REZEPTHasManyBESTELLUNG_REZEPTList",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields of model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/api/v1/REZEPT/{REZEPTId}/BESTELLUNG_REZEPT": {
      "get": {
        "tags": [
          "REZEPTHasManyBESTELLUNG_REZEPT"
        ],
        "summary": "Find BESTELLUNG_REZEPT list by parent REZEPT id",
        "description": "Returns a single REZEPT",
        "operationId": "getBESTELLUNG_REZEPTByREZEPTId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "REZEPTId",
            "in": "path",
            "description": "ID of REZEPT to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields of model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": "object"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "REZEPT not found"
          }
        }
      },
      "post": {
        "tags": [
          "REZEPTHasManyBESTELLUNG_REZEPT"
        ],
        "summary": "Insert BESTELLUNG_REZEPT under a parent REZEPT",
        "description": "Returns a single REZEPT",
        "operationId": "insertBESTELLUNG_REZEPTByREZEPTId",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "BESTELLUNG_REZEPT object to insert",
            "required": true,
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "REZEPTId",
            "in": "path",
            "description": "ID of REZEPT to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/REZEPT/{REZEPTId}/BESTELLUNG_REZEPT/{BESTELLUNG_REZEPTId}": {
      "get": {
        "tags": [
          "REZEPTHasManyBESTELLUNG_REZEPT"
        ],
        "summary": "Get by BESTELLUNG_REZEPT id parent REZEPT id",
        "description": "Returns a single REZEPT",
        "operationId": "getBESTELLUNG_REZEPTByIdAndREZEPTId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "REZEPTId",
            "in": "path",
            "description": "ID of parent REZEPT",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "BESTELLUNG_REZEPTId",
            "in": "path",
            "description": "ID of BESTELLUNG_REZEPT",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": "object"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "REZEPTHasManyBESTELLUNG_REZEPT"
        ],
        "summary": "Delete by BESTELLUNG_REZEPT id parent REZEPT id",
        "description": "Returns a single REZEPT",
        "operationId": "deleteBESTELLUNG_REZEPTByIdAndREZEPTId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "REZEPTId",
            "in": "path",
            "description": "ID of parent REZEPT",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "BESTELLUNG_REZEPTId",
            "in": "path",
            "description": "ID of cBESTELLUNG_REZEPT",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      },
      "put": {
        "tags": [
          "REZEPTHasManyBESTELLUNG_REZEPT"
        ],
        "summary": "Update BESTELLUNG_REZEPT under a parent REZEPT",
        "description": "Returns a single REZEPT",
        "operationId": "updateBESTELLUNG_REZEPTByIdAndREZEPTId",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "BESTELLUNG_REZEPT object to insert",
            "required": true,
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "REZEPTId",
            "in": "path",
            "description": "ID of REZEPT to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "BESTELLUNG_REZEPTId",
            "in": "path",
            "description": "ID of BESTELLUNG_REZEPT",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/REZEPT/{REZEPTId}/BESTELLUNG_REZEPT/{BESTELLUNG_REZEPTId}/exists": {
      "get": {
        "tags": [
          "REZEPTHasManyBESTELLUNG_REZEPT"
        ],
        "summary": "Check row exists by BESTELLUNG_REZEPT id and parent REZEPT id",
        "description": "",
        "operationId": "existsBESTELLUNG_REZEPTByIdAndREZEPTId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "REZEPTId",
            "in": "path",
            "description": "ID of parent REZEPT",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "BESTELLUNG_REZEPTId",
            "in": "path",
            "description": "ID of BESTELLUNG_REZEPT",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/REZEPT/{REZEPTId}/BESTELLUNG_REZEPT/findOne": {
      "get": {
        "tags": [
          "REZEPTHasManyBESTELLUNG_REZEPT"
        ],
        "summary": "Find one BESTELLUNG_REZEPT by parent REZEPT id and filters",
        "description": "",
        "operationId": "findOneBESTELLUNG_REZEPTByREZEPTId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "REZEPTId",
            "in": "path",
            "description": "ID of parent REZEPT",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields of model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/REZEPT/{REZEPTId}/BESTELLUNG_REZEPT/count": {
      "get": {
        "tags": [
          "REZEPTHasManyBESTELLUNG_REZEPT"
        ],
        "summary": "Get BESTELLUNG_REZEPT count by parent id and filter",
        "description": "",
        "operationId": "getCountWithinREZEPTId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "REZEPTId",
            "in": "path",
            "description": "ID of parent REZEPT",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/REZEPT/has/REZEPTINHALT": {
      "get": {
        "tags": [
          "REZEPTHasManyREZEPTINHALT"
        ],
        "summary": "Get REZEPT list with REZEPTINHALT children",
        "description": "",
        "operationId": "REZEPTHasManyREZEPTINHALTList",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields of model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/api/v1/REZEPT/{REZEPTId}/REZEPTINHALT": {
      "get": {
        "tags": [
          "REZEPTHasManyREZEPTINHALT"
        ],
        "summary": "Find REZEPTINHALT list by parent REZEPT id",
        "description": "Returns a single REZEPT",
        "operationId": "getREZEPTINHALTByREZEPTId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "REZEPTId",
            "in": "path",
            "description": "ID of REZEPT to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields of model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": "object"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "REZEPT not found"
          }
        }
      },
      "post": {
        "tags": [
          "REZEPTHasManyREZEPTINHALT"
        ],
        "summary": "Insert REZEPTINHALT under a parent REZEPT",
        "description": "Returns a single REZEPT",
        "operationId": "insertREZEPTINHALTByREZEPTId",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "REZEPTINHALT object to insert",
            "required": true,
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "REZEPTId",
            "in": "path",
            "description": "ID of REZEPT to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/REZEPT/{REZEPTId}/REZEPTINHALT/{REZEPTINHALTId}": {
      "get": {
        "tags": [
          "REZEPTHasManyREZEPTINHALT"
        ],
        "summary": "Get by REZEPTINHALT id parent REZEPT id",
        "description": "Returns a single REZEPT",
        "operationId": "getREZEPTINHALTByIdAndREZEPTId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "REZEPTId",
            "in": "path",
            "description": "ID of parent REZEPT",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "REZEPTINHALTId",
            "in": "path",
            "description": "ID of REZEPTINHALT",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": "object"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "REZEPTHasManyREZEPTINHALT"
        ],
        "summary": "Delete by REZEPTINHALT id parent REZEPT id",
        "description": "Returns a single REZEPT",
        "operationId": "deleteREZEPTINHALTByIdAndREZEPTId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "REZEPTId",
            "in": "path",
            "description": "ID of parent REZEPT",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "REZEPTINHALTId",
            "in": "path",
            "description": "ID of cREZEPTINHALT",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      },
      "put": {
        "tags": [
          "REZEPTHasManyREZEPTINHALT"
        ],
        "summary": "Update REZEPTINHALT under a parent REZEPT",
        "description": "Returns a single REZEPT",
        "operationId": "updateREZEPTINHALTByIdAndREZEPTId",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "REZEPTINHALT object to insert",
            "required": true,
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "REZEPTId",
            "in": "path",
            "description": "ID of REZEPT to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "REZEPTINHALTId",
            "in": "path",
            "description": "ID of REZEPTINHALT",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/REZEPT/{REZEPTId}/REZEPTINHALT/{REZEPTINHALTId}/exists": {
      "get": {
        "tags": [
          "REZEPTHasManyREZEPTINHALT"
        ],
        "summary": "Check row exists by REZEPTINHALT id and parent REZEPT id",
        "description": "",
        "operationId": "existsREZEPTINHALTByIdAndREZEPTId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "REZEPTId",
            "in": "path",
            "description": "ID of parent REZEPT",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "REZEPTINHALTId",
            "in": "path",
            "description": "ID of REZEPTINHALT",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/REZEPT/{REZEPTId}/REZEPTINHALT/findOne": {
      "get": {
        "tags": [
          "REZEPTHasManyREZEPTINHALT"
        ],
        "summary": "Find one REZEPTINHALT by parent REZEPT id and filters",
        "description": "",
        "operationId": "findOneREZEPTINHALTByREZEPTId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "REZEPTId",
            "in": "path",
            "description": "ID of parent REZEPT",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields of model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/REZEPT/{REZEPTId}/REZEPTINHALT/count": {
      "get": {
        "tags": [
          "REZEPTHasManyREZEPTINHALT"
        ],
        "summary": "Get REZEPTINHALT count by parent id and filter",
        "description": "",
        "operationId": "getCountWithinREZEPTId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "REZEPTId",
            "in": "path",
            "description": "ID of parent REZEPT",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/REZEPT": {
      "post": {
        "tags": [
          "REZEPT"
        ],
        "summary": "Add a new REZEPT",
        "description": "",
        "operationId": "addREZEPT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "REZEPT object that needs to add",
            "required": true,
            "schema": {
              "$ref": "#/definitions/REZEPT"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "get": {
        "tags": [
          "REZEPT"
        ],
        "summary": "Get list",
        "description": "",
        "operationId": "getREZEPT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/REZEPT/{REZEPTId}": {
      "get": {
        "tags": [
          "REZEPT"
        ],
        "summary": "Find REZEPT by ID",
        "description": "Returns a single REZEPT",
        "operationId": "getREZEPTById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "REZEPTId",
            "in": "path",
            "description": "ID of REZEPT to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/REZEPT"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "REZEPT not found"
          }
        }
      },
      "put": {
        "tags": [
          "REZEPT"
        ],
        "summary": "Updates a REZEPT",
        "description": "",
        "operationId": "updateREZEPT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "REZEPTId",
            "in": "path",
            "description": "ID of REZEPT to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "REZEPT object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/REZEPT"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "REZEPT"
        ],
        "summary": "Deletes a REZEPT",
        "description": "",
        "operationId": "deleteREZEPT",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "REZEPTId",
            "in": "path",
            "description": "ID of REZEPT to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "REZEPT not found"
          }
        }
      }
    },
    "/api/v1/REZEPT/bulk": {
      "post": {
        "tags": [
          "REZEPT"
        ],
        "summary": "Bulk REZEPT insert",
        "description": "",
        "operationId": "bulkREZEPTInsert",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "REZEPT objects",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/REZEPT"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "put": {
        "tags": [
          "REZEPT"
        ],
        "summary": "Updates a REZEPT",
        "description": "",
        "operationId": "updateREZEPT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "REZEPT objects with id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/REZEPT"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "REZEPT"
        ],
        "summary": "Deletes a REZEPT",
        "description": "",
        "operationId": "deleteREZEPT",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "REZEPT objects contains id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/REZEPT"
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "REZEPT not found"
          }
        }
      }
    },
    "/api/v1/REZEPT/findOne": {
      "get": {
        "tags": [
          "REZEPT"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "findOneREZEPT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/REZEPT"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/REZEPT/{REZEPTId}/exists": {
      "get": {
        "tags": [
          "REZEPT"
        ],
        "summary": "Check REZEPT with provided ID exists",
        "description": "Returns a single REZEPT",
        "operationId": "checkREZEPTExists",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "REZEPTId",
            "in": "path",
            "description": "ID of REZEPT",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/REZEPT/count": {
      "get": {
        "tags": [
          "REZEPT"
        ],
        "summary": "Get REZEPT count",
        "operationId": "getREZEPTCount",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/REZEPT/groupby/{columnName}": {
      "get": {
        "tags": [
          "REZEPT"
        ],
        "summary": "Group by column",
        "description": "",
        "operationId": "REZEPTGroupByColumn",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/REZEPT"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/REZEPT/distribution/{columnName}": {
      "get": {
        "tags": [
          "REZEPT"
        ],
        "summary": "",
        "description": "",
        "operationId": "REZEPTDistribution",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "min",
            "description": "min value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "max",
            "description": "max value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "step",
            "description": "step value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "steps",
            "description": "steps value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "func",
            "description": "comma separated aggregation functions",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/REZEPT/distinct/{columnName}": {
      "get": {
        "tags": [
          "REZEPT"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "REZEPTDistinct",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/REZEPT/aggregate/{columnName}": {
      "get": {
        "tags": [
          "REZEPT"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "REZEPTAggregate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "fields",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "func",
            "type": "String",
            "description": "Comma seperated aggregate functions"
          },
          {
            "in": "query",
            "name": "having",
            "type": "String",
            "description": "Having expression"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/REZEPT"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/REZEPTINHALT/belongs/REZEPT": {
      "get": {
        "tags": [
          "REZEPTINHALTBelongsToREZEPT"
        ],
        "summary": "Get REZEPTINHALT list with REZEPT parent",
        "description": "",
        "operationId": "REZEPTINHALTWithParent",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/api/v1/REZEPTINHALT/belongs/ZUTAT": {
      "get": {
        "tags": [
          "REZEPTINHALTBelongsToZUTAT"
        ],
        "summary": "Get REZEPTINHALT list with ZUTAT parent",
        "description": "",
        "operationId": "REZEPTINHALTWithParent",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/api/v1/REZEPTINHALT": {
      "post": {
        "tags": [
          "REZEPTINHALT"
        ],
        "summary": "Add a new REZEPTINHALT",
        "description": "",
        "operationId": "addREZEPTINHALT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "REZEPTINHALT object that needs to add",
            "required": true,
            "schema": {
              "$ref": "#/definitions/REZEPTINHALT"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "get": {
        "tags": [
          "REZEPTINHALT"
        ],
        "summary": "Get list",
        "description": "",
        "operationId": "getREZEPTINHALT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/REZEPTINHALT/{REZEPTINHALTId}": {
      "get": {
        "tags": [
          "REZEPTINHALT"
        ],
        "summary": "Find REZEPTINHALT by ID",
        "description": "Returns a single REZEPTINHALT",
        "operationId": "getREZEPTINHALTById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "REZEPTINHALTId",
            "in": "path",
            "description": "ID of REZEPTINHALT to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/REZEPTINHALT"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "REZEPTINHALT not found"
          }
        }
      },
      "put": {
        "tags": [
          "REZEPTINHALT"
        ],
        "summary": "Updates a REZEPTINHALT",
        "description": "",
        "operationId": "updateREZEPTINHALT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "REZEPTINHALTId",
            "in": "path",
            "description": "ID of REZEPTINHALT to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "REZEPTINHALT object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/REZEPTINHALT"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "REZEPTINHALT"
        ],
        "summary": "Deletes a REZEPTINHALT",
        "description": "",
        "operationId": "deleteREZEPTINHALT",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "REZEPTINHALTId",
            "in": "path",
            "description": "ID of REZEPTINHALT to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "REZEPTINHALT not found"
          }
        }
      }
    },
    "/api/v1/REZEPTINHALT/bulk": {
      "post": {
        "tags": [
          "REZEPTINHALT"
        ],
        "summary": "Bulk REZEPTINHALT insert",
        "description": "",
        "operationId": "bulkREZEPTINHALTInsert",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "REZEPTINHALT objects",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/REZEPTINHALT"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "put": {
        "tags": [
          "REZEPTINHALT"
        ],
        "summary": "Updates a REZEPTINHALT",
        "description": "",
        "operationId": "updateREZEPTINHALT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "REZEPTINHALT objects with id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/REZEPTINHALT"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "REZEPTINHALT"
        ],
        "summary": "Deletes a REZEPTINHALT",
        "description": "",
        "operationId": "deleteREZEPTINHALT",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "REZEPTINHALT objects contains id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/REZEPTINHALT"
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "REZEPTINHALT not found"
          }
        }
      }
    },
    "/api/v1/REZEPTINHALT/findOne": {
      "get": {
        "tags": [
          "REZEPTINHALT"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "findOneREZEPTINHALT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/REZEPTINHALT"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/REZEPTINHALT/{REZEPTINHALTId}/exists": {
      "get": {
        "tags": [
          "REZEPTINHALT"
        ],
        "summary": "Check REZEPTINHALT with provided ID exists",
        "description": "Returns a single REZEPTINHALT",
        "operationId": "checkREZEPTINHALTExists",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "REZEPTINHALTId",
            "in": "path",
            "description": "ID of REZEPTINHALT",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/REZEPTINHALT/count": {
      "get": {
        "tags": [
          "REZEPTINHALT"
        ],
        "summary": "Get REZEPTINHALT count",
        "operationId": "getREZEPTINHALTCount",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/REZEPTINHALT/groupby/{columnName}": {
      "get": {
        "tags": [
          "REZEPTINHALT"
        ],
        "summary": "Group by column",
        "description": "",
        "operationId": "REZEPTINHALTGroupByColumn",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/REZEPTINHALT"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/REZEPTINHALT/distribution/{columnName}": {
      "get": {
        "tags": [
          "REZEPTINHALT"
        ],
        "summary": "",
        "description": "",
        "operationId": "REZEPTINHALTDistribution",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "min",
            "description": "min value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "max",
            "description": "max value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "step",
            "description": "step value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "steps",
            "description": "steps value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "func",
            "description": "comma separated aggregation functions",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/REZEPTINHALT/distinct/{columnName}": {
      "get": {
        "tags": [
          "REZEPTINHALT"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "REZEPTINHALTDistinct",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/REZEPTINHALT/aggregate/{columnName}": {
      "get": {
        "tags": [
          "REZEPTINHALT"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "REZEPTINHALTAggregate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "fields",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "func",
            "type": "String",
            "description": "Comma seperated aggregate functions"
          },
          {
            "in": "query",
            "name": "having",
            "type": "String",
            "description": "Having expression"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/REZEPTINHALT"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/SENDUNG_ZUTAT/belongs/SENDUNG": {
      "get": {
        "tags": [
          "SENDUNG_ZUTATBelongsToSENDUNG"
        ],
        "summary": "Get SENDUNG_ZUTAT list with SENDUNG parent",
        "description": "",
        "operationId": "SENDUNG_ZUTATWithParent",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/api/v1/SENDUNG_ZUTAT/belongs/ZUTAT": {
      "get": {
        "tags": [
          "SENDUNG_ZUTATBelongsToZUTAT"
        ],
        "summary": "Get SENDUNG_ZUTAT list with ZUTAT parent",
        "description": "",
        "operationId": "SENDUNG_ZUTATWithParent",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/api/v1/SENDUNG_ZUTAT": {
      "post": {
        "tags": [
          "SENDUNG_ZUTAT"
        ],
        "summary": "Add a new SENDUNG_ZUTAT",
        "description": "",
        "operationId": "addSENDUNG_ZUTAT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "SENDUNG_ZUTAT object that needs to add",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SENDUNG_ZUTAT"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "get": {
        "tags": [
          "SENDUNG_ZUTAT"
        ],
        "summary": "Get list",
        "description": "",
        "operationId": "getSENDUNG_ZUTAT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/SENDUNG_ZUTAT/{SENDUNG_ZUTATId}": {
      "get": {
        "tags": [
          "SENDUNG_ZUTAT"
        ],
        "summary": "Find SENDUNG_ZUTAT by ID",
        "description": "Returns a single SENDUNG_ZUTAT",
        "operationId": "getSENDUNG_ZUTATById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "SENDUNG_ZUTATId",
            "in": "path",
            "description": "ID of SENDUNG_ZUTAT to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/SENDUNG_ZUTAT"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "SENDUNG_ZUTAT not found"
          }
        }
      },
      "put": {
        "tags": [
          "SENDUNG_ZUTAT"
        ],
        "summary": "Updates a SENDUNG_ZUTAT",
        "description": "",
        "operationId": "updateSENDUNG_ZUTAT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "SENDUNG_ZUTATId",
            "in": "path",
            "description": "ID of SENDUNG_ZUTAT to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "SENDUNG_ZUTAT object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SENDUNG_ZUTAT"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "SENDUNG_ZUTAT"
        ],
        "summary": "Deletes a SENDUNG_ZUTAT",
        "description": "",
        "operationId": "deleteSENDUNG_ZUTAT",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "SENDUNG_ZUTATId",
            "in": "path",
            "description": "ID of SENDUNG_ZUTAT to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "SENDUNG_ZUTAT not found"
          }
        }
      }
    },
    "/api/v1/SENDUNG_ZUTAT/bulk": {
      "post": {
        "tags": [
          "SENDUNG_ZUTAT"
        ],
        "summary": "Bulk SENDUNG_ZUTAT insert",
        "description": "",
        "operationId": "bulkSENDUNG_ZUTATInsert",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "SENDUNG_ZUTAT objects",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SENDUNG_ZUTAT"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "put": {
        "tags": [
          "SENDUNG_ZUTAT"
        ],
        "summary": "Updates a SENDUNG_ZUTAT",
        "description": "",
        "operationId": "updateSENDUNG_ZUTAT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "SENDUNG_ZUTAT objects with id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SENDUNG_ZUTAT"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "SENDUNG_ZUTAT"
        ],
        "summary": "Deletes a SENDUNG_ZUTAT",
        "description": "",
        "operationId": "deleteSENDUNG_ZUTAT",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "SENDUNG_ZUTAT objects contains id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SENDUNG_ZUTAT"
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "SENDUNG_ZUTAT not found"
          }
        }
      }
    },
    "/api/v1/SENDUNG_ZUTAT/findOne": {
      "get": {
        "tags": [
          "SENDUNG_ZUTAT"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "findOneSENDUNG_ZUTAT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/SENDUNG_ZUTAT"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/SENDUNG_ZUTAT/{SENDUNG_ZUTATId}/exists": {
      "get": {
        "tags": [
          "SENDUNG_ZUTAT"
        ],
        "summary": "Check SENDUNG_ZUTAT with provided ID exists",
        "description": "Returns a single SENDUNG_ZUTAT",
        "operationId": "checkSENDUNG_ZUTATExists",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "SENDUNG_ZUTATId",
            "in": "path",
            "description": "ID of SENDUNG_ZUTAT",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/SENDUNG_ZUTAT/count": {
      "get": {
        "tags": [
          "SENDUNG_ZUTAT"
        ],
        "summary": "Get SENDUNG_ZUTAT count",
        "operationId": "getSENDUNG_ZUTATCount",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/SENDUNG_ZUTAT/groupby/{columnName}": {
      "get": {
        "tags": [
          "SENDUNG_ZUTAT"
        ],
        "summary": "Group by column",
        "description": "",
        "operationId": "SENDUNG_ZUTATGroupByColumn",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/SENDUNG_ZUTAT"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/SENDUNG_ZUTAT/distribution/{columnName}": {
      "get": {
        "tags": [
          "SENDUNG_ZUTAT"
        ],
        "summary": "",
        "description": "",
        "operationId": "SENDUNG_ZUTATDistribution",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "min",
            "description": "min value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "max",
            "description": "max value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "step",
            "description": "step value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "steps",
            "description": "steps value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "func",
            "description": "comma separated aggregation functions",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/SENDUNG_ZUTAT/distinct/{columnName}": {
      "get": {
        "tags": [
          "SENDUNG_ZUTAT"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "SENDUNG_ZUTATDistinct",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/SENDUNG_ZUTAT/aggregate/{columnName}": {
      "get": {
        "tags": [
          "SENDUNG_ZUTAT"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "SENDUNG_ZUTATAggregate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "fields",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "func",
            "type": "String",
            "description": "Comma seperated aggregate functions"
          },
          {
            "in": "query",
            "name": "having",
            "type": "String",
            "description": "Having expression"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/SENDUNG_ZUTAT"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/SENDUNG/has/LIEFERANT_SENDUNG": {
      "get": {
        "tags": [
          "SENDUNGHasManyLIEFERANT_SENDUNG"
        ],
        "summary": "Get SENDUNG list with LIEFERANT_SENDUNG children",
        "description": "",
        "operationId": "SENDUNGHasManyLIEFERANT_SENDUNGList",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields of model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/api/v1/SENDUNG/{SENDUNGId}/LIEFERANT_SENDUNG": {
      "get": {
        "tags": [
          "SENDUNGHasManyLIEFERANT_SENDUNG"
        ],
        "summary": "Find LIEFERANT_SENDUNG list by parent SENDUNG id",
        "description": "Returns a single SENDUNG",
        "operationId": "getLIEFERANT_SENDUNGBySENDUNGId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "SENDUNGId",
            "in": "path",
            "description": "ID of SENDUNG to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields of model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": "object"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "SENDUNG not found"
          }
        }
      },
      "post": {
        "tags": [
          "SENDUNGHasManyLIEFERANT_SENDUNG"
        ],
        "summary": "Insert LIEFERANT_SENDUNG under a parent SENDUNG",
        "description": "Returns a single SENDUNG",
        "operationId": "insertLIEFERANT_SENDUNGBySENDUNGId",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "LIEFERANT_SENDUNG object to insert",
            "required": true,
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "SENDUNGId",
            "in": "path",
            "description": "ID of SENDUNG to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/SENDUNG/{SENDUNGId}/LIEFERANT_SENDUNG/{LIEFERANT_SENDUNGId}": {
      "get": {
        "tags": [
          "SENDUNGHasManyLIEFERANT_SENDUNG"
        ],
        "summary": "Get by LIEFERANT_SENDUNG id parent SENDUNG id",
        "description": "Returns a single SENDUNG",
        "operationId": "getLIEFERANT_SENDUNGByIdAndSENDUNGId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "SENDUNGId",
            "in": "path",
            "description": "ID of parent SENDUNG",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "LIEFERANT_SENDUNGId",
            "in": "path",
            "description": "ID of LIEFERANT_SENDUNG",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": "object"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "SENDUNGHasManyLIEFERANT_SENDUNG"
        ],
        "summary": "Delete by LIEFERANT_SENDUNG id parent SENDUNG id",
        "description": "Returns a single SENDUNG",
        "operationId": "deleteLIEFERANT_SENDUNGByIdAndSENDUNGId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "SENDUNGId",
            "in": "path",
            "description": "ID of parent SENDUNG",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "LIEFERANT_SENDUNGId",
            "in": "path",
            "description": "ID of cLIEFERANT_SENDUNG",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      },
      "put": {
        "tags": [
          "SENDUNGHasManyLIEFERANT_SENDUNG"
        ],
        "summary": "Update LIEFERANT_SENDUNG under a parent SENDUNG",
        "description": "Returns a single SENDUNG",
        "operationId": "updateLIEFERANT_SENDUNGByIdAndSENDUNGId",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "LIEFERANT_SENDUNG object to insert",
            "required": true,
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "SENDUNGId",
            "in": "path",
            "description": "ID of SENDUNG to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "LIEFERANT_SENDUNGId",
            "in": "path",
            "description": "ID of LIEFERANT_SENDUNG",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/SENDUNG/{SENDUNGId}/LIEFERANT_SENDUNG/{LIEFERANT_SENDUNGId}/exists": {
      "get": {
        "tags": [
          "SENDUNGHasManyLIEFERANT_SENDUNG"
        ],
        "summary": "Check row exists by LIEFERANT_SENDUNG id and parent SENDUNG id",
        "description": "",
        "operationId": "existsLIEFERANT_SENDUNGByIdAndSENDUNGId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "SENDUNGId",
            "in": "path",
            "description": "ID of parent SENDUNG",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "LIEFERANT_SENDUNGId",
            "in": "path",
            "description": "ID of LIEFERANT_SENDUNG",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/SENDUNG/{SENDUNGId}/LIEFERANT_SENDUNG/findOne": {
      "get": {
        "tags": [
          "SENDUNGHasManyLIEFERANT_SENDUNG"
        ],
        "summary": "Find one LIEFERANT_SENDUNG by parent SENDUNG id and filters",
        "description": "",
        "operationId": "findOneLIEFERANT_SENDUNGBySENDUNGId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "SENDUNGId",
            "in": "path",
            "description": "ID of parent SENDUNG",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields of model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/SENDUNG/{SENDUNGId}/LIEFERANT_SENDUNG/count": {
      "get": {
        "tags": [
          "SENDUNGHasManyLIEFERANT_SENDUNG"
        ],
        "summary": "Get LIEFERANT_SENDUNG count by parent id and filter",
        "description": "",
        "operationId": "getCountWithinSENDUNGId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "SENDUNGId",
            "in": "path",
            "description": "ID of parent SENDUNG",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/SENDUNG/has/SENDUNG_ZUTAT": {
      "get": {
        "tags": [
          "SENDUNGHasManySENDUNG_ZUTAT"
        ],
        "summary": "Get SENDUNG list with SENDUNG_ZUTAT children",
        "description": "",
        "operationId": "SENDUNGHasManySENDUNG_ZUTATList",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields of model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/api/v1/SENDUNG/{SENDUNGId}/SENDUNG_ZUTAT": {
      "get": {
        "tags": [
          "SENDUNGHasManySENDUNG_ZUTAT"
        ],
        "summary": "Find SENDUNG_ZUTAT list by parent SENDUNG id",
        "description": "Returns a single SENDUNG",
        "operationId": "getSENDUNG_ZUTATBySENDUNGId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "SENDUNGId",
            "in": "path",
            "description": "ID of SENDUNG to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields of model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": "object"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "SENDUNG not found"
          }
        }
      },
      "post": {
        "tags": [
          "SENDUNGHasManySENDUNG_ZUTAT"
        ],
        "summary": "Insert SENDUNG_ZUTAT under a parent SENDUNG",
        "description": "Returns a single SENDUNG",
        "operationId": "insertSENDUNG_ZUTATBySENDUNGId",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "SENDUNG_ZUTAT object to insert",
            "required": true,
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "SENDUNGId",
            "in": "path",
            "description": "ID of SENDUNG to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/SENDUNG/{SENDUNGId}/SENDUNG_ZUTAT/{SENDUNG_ZUTATId}": {
      "get": {
        "tags": [
          "SENDUNGHasManySENDUNG_ZUTAT"
        ],
        "summary": "Get by SENDUNG_ZUTAT id parent SENDUNG id",
        "description": "Returns a single SENDUNG",
        "operationId": "getSENDUNG_ZUTATByIdAndSENDUNGId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "SENDUNGId",
            "in": "path",
            "description": "ID of parent SENDUNG",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "SENDUNG_ZUTATId",
            "in": "path",
            "description": "ID of SENDUNG_ZUTAT",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": "object"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "SENDUNGHasManySENDUNG_ZUTAT"
        ],
        "summary": "Delete by SENDUNG_ZUTAT id parent SENDUNG id",
        "description": "Returns a single SENDUNG",
        "operationId": "deleteSENDUNG_ZUTATByIdAndSENDUNGId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "SENDUNGId",
            "in": "path",
            "description": "ID of parent SENDUNG",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "SENDUNG_ZUTATId",
            "in": "path",
            "description": "ID of cSENDUNG_ZUTAT",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      },
      "put": {
        "tags": [
          "SENDUNGHasManySENDUNG_ZUTAT"
        ],
        "summary": "Update SENDUNG_ZUTAT under a parent SENDUNG",
        "description": "Returns a single SENDUNG",
        "operationId": "updateSENDUNG_ZUTATByIdAndSENDUNGId",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "SENDUNG_ZUTAT object to insert",
            "required": true,
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "SENDUNGId",
            "in": "path",
            "description": "ID of SENDUNG to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "SENDUNG_ZUTATId",
            "in": "path",
            "description": "ID of SENDUNG_ZUTAT",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/SENDUNG/{SENDUNGId}/SENDUNG_ZUTAT/{SENDUNG_ZUTATId}/exists": {
      "get": {
        "tags": [
          "SENDUNGHasManySENDUNG_ZUTAT"
        ],
        "summary": "Check row exists by SENDUNG_ZUTAT id and parent SENDUNG id",
        "description": "",
        "operationId": "existsSENDUNG_ZUTATByIdAndSENDUNGId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "SENDUNGId",
            "in": "path",
            "description": "ID of parent SENDUNG",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "SENDUNG_ZUTATId",
            "in": "path",
            "description": "ID of SENDUNG_ZUTAT",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/SENDUNG/{SENDUNGId}/SENDUNG_ZUTAT/findOne": {
      "get": {
        "tags": [
          "SENDUNGHasManySENDUNG_ZUTAT"
        ],
        "summary": "Find one SENDUNG_ZUTAT by parent SENDUNG id and filters",
        "description": "",
        "operationId": "findOneSENDUNG_ZUTATBySENDUNGId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "SENDUNGId",
            "in": "path",
            "description": "ID of parent SENDUNG",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields of model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/SENDUNG/{SENDUNGId}/SENDUNG_ZUTAT/count": {
      "get": {
        "tags": [
          "SENDUNGHasManySENDUNG_ZUTAT"
        ],
        "summary": "Get SENDUNG_ZUTAT count by parent id and filter",
        "description": "",
        "operationId": "getCountWithinSENDUNGId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "SENDUNGId",
            "in": "path",
            "description": "ID of parent SENDUNG",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/SENDUNG": {
      "post": {
        "tags": [
          "SENDUNG"
        ],
        "summary": "Add a new SENDUNG",
        "description": "",
        "operationId": "addSENDUNG",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "SENDUNG object that needs to add",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SENDUNG"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "get": {
        "tags": [
          "SENDUNG"
        ],
        "summary": "Get list",
        "description": "",
        "operationId": "getSENDUNG",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/SENDUNG/{SENDUNGId}": {
      "get": {
        "tags": [
          "SENDUNG"
        ],
        "summary": "Find SENDUNG by ID",
        "description": "Returns a single SENDUNG",
        "operationId": "getSENDUNGById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "SENDUNGId",
            "in": "path",
            "description": "ID of SENDUNG to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/SENDUNG"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "SENDUNG not found"
          }
        }
      },
      "put": {
        "tags": [
          "SENDUNG"
        ],
        "summary": "Updates a SENDUNG",
        "description": "",
        "operationId": "updateSENDUNG",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "SENDUNGId",
            "in": "path",
            "description": "ID of SENDUNG to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "SENDUNG object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SENDUNG"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "SENDUNG"
        ],
        "summary": "Deletes a SENDUNG",
        "description": "",
        "operationId": "deleteSENDUNG",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "SENDUNGId",
            "in": "path",
            "description": "ID of SENDUNG to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "SENDUNG not found"
          }
        }
      }
    },
    "/api/v1/SENDUNG/bulk": {
      "post": {
        "tags": [
          "SENDUNG"
        ],
        "summary": "Bulk SENDUNG insert",
        "description": "",
        "operationId": "bulkSENDUNGInsert",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "SENDUNG objects",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SENDUNG"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "put": {
        "tags": [
          "SENDUNG"
        ],
        "summary": "Updates a SENDUNG",
        "description": "",
        "operationId": "updateSENDUNG",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "SENDUNG objects with id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SENDUNG"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "SENDUNG"
        ],
        "summary": "Deletes a SENDUNG",
        "description": "",
        "operationId": "deleteSENDUNG",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "SENDUNG objects contains id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SENDUNG"
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "SENDUNG not found"
          }
        }
      }
    },
    "/api/v1/SENDUNG/findOne": {
      "get": {
        "tags": [
          "SENDUNG"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "findOneSENDUNG",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/SENDUNG"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/SENDUNG/{SENDUNGId}/exists": {
      "get": {
        "tags": [
          "SENDUNG"
        ],
        "summary": "Check SENDUNG with provided ID exists",
        "description": "Returns a single SENDUNG",
        "operationId": "checkSENDUNGExists",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "SENDUNGId",
            "in": "path",
            "description": "ID of SENDUNG",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/SENDUNG/count": {
      "get": {
        "tags": [
          "SENDUNG"
        ],
        "summary": "Get SENDUNG count",
        "operationId": "getSENDUNGCount",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/SENDUNG/groupby/{columnName}": {
      "get": {
        "tags": [
          "SENDUNG"
        ],
        "summary": "Group by column",
        "description": "",
        "operationId": "SENDUNGGroupByColumn",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/SENDUNG"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/SENDUNG/distribution/{columnName}": {
      "get": {
        "tags": [
          "SENDUNG"
        ],
        "summary": "",
        "description": "",
        "operationId": "SENDUNGDistribution",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "min",
            "description": "min value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "max",
            "description": "max value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "step",
            "description": "step value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "steps",
            "description": "steps value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "func",
            "description": "comma separated aggregation functions",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/SENDUNG/distinct/{columnName}": {
      "get": {
        "tags": [
          "SENDUNG"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "SENDUNGDistinct",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/SENDUNG/aggregate/{columnName}": {
      "get": {
        "tags": [
          "SENDUNG"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "SENDUNGAggregate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "fields",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "func",
            "type": "String",
            "description": "Comma seperated aggregate functions"
          },
          {
            "in": "query",
            "name": "having",
            "type": "String",
            "description": "Having expression"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/SENDUNG"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/ZUTAT_KRITISCHE_INHALTSSTOFFE/belongs/KRITISCHE_INHALTSSTOFFE": {
      "get": {
        "tags": [
          "ZUTAT_KRITISCHE_INHALTSSTOFFEBelongsToKRITISCHE_INHALTSSTOFFE"
        ],
        "summary": "Get ZUTAT_KRITISCHE_INHALTSSTOFFE list with KRITISCHE_INHALTSSTOFFE parent",
        "description": "",
        "operationId": "ZUTAT_KRITISCHE_INHALTSSTOFFEWithParent",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/api/v1/ZUTAT_KRITISCHE_INHALTSSTOFFE/belongs/ZUTAT": {
      "get": {
        "tags": [
          "ZUTAT_KRITISCHE_INHALTSSTOFFEBelongsToZUTAT"
        ],
        "summary": "Get ZUTAT_KRITISCHE_INHALTSSTOFFE list with ZUTAT parent",
        "description": "",
        "operationId": "ZUTAT_KRITISCHE_INHALTSSTOFFEWithParent",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/api/v1/ZUTAT_KRITISCHE_INHALTSSTOFFE": {
      "post": {
        "tags": [
          "ZUTAT_KRITISCHE_INHALTSSTOFFE"
        ],
        "summary": "Add a new ZUTAT_KRITISCHE_INHALTSSTOFFE",
        "description": "",
        "operationId": "addZUTAT_KRITISCHE_INHALTSSTOFFE",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "ZUTAT_KRITISCHE_INHALTSSTOFFE object that needs to add",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ZUTAT_KRITISCHE_INHALTSSTOFFE"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "get": {
        "tags": [
          "ZUTAT_KRITISCHE_INHALTSSTOFFE"
        ],
        "summary": "Get list",
        "description": "",
        "operationId": "getZUTAT_KRITISCHE_INHALTSSTOFFE",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/ZUTAT_KRITISCHE_INHALTSSTOFFE/{ZUTAT_KRITISCHE_INHALTSSTOFFEId}": {
      "get": {
        "tags": [
          "ZUTAT_KRITISCHE_INHALTSSTOFFE"
        ],
        "summary": "Find ZUTAT_KRITISCHE_INHALTSSTOFFE by ID",
        "description": "Returns a single ZUTAT_KRITISCHE_INHALTSSTOFFE",
        "operationId": "getZUTAT_KRITISCHE_INHALTSSTOFFEById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "ZUTAT_KRITISCHE_INHALTSSTOFFEId",
            "in": "path",
            "description": "ID of ZUTAT_KRITISCHE_INHALTSSTOFFE to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ZUTAT_KRITISCHE_INHALTSSTOFFE"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "ZUTAT_KRITISCHE_INHALTSSTOFFE not found"
          }
        }
      },
      "put": {
        "tags": [
          "ZUTAT_KRITISCHE_INHALTSSTOFFE"
        ],
        "summary": "Updates a ZUTAT_KRITISCHE_INHALTSSTOFFE",
        "description": "",
        "operationId": "updateZUTAT_KRITISCHE_INHALTSSTOFFE",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "ZUTAT_KRITISCHE_INHALTSSTOFFEId",
            "in": "path",
            "description": "ID of ZUTAT_KRITISCHE_INHALTSSTOFFE to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "ZUTAT_KRITISCHE_INHALTSSTOFFE object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ZUTAT_KRITISCHE_INHALTSSTOFFE"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "ZUTAT_KRITISCHE_INHALTSSTOFFE"
        ],
        "summary": "Deletes a ZUTAT_KRITISCHE_INHALTSSTOFFE",
        "description": "",
        "operationId": "deleteZUTAT_KRITISCHE_INHALTSSTOFFE",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "ZUTAT_KRITISCHE_INHALTSSTOFFEId",
            "in": "path",
            "description": "ID of ZUTAT_KRITISCHE_INHALTSSTOFFE to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "ZUTAT_KRITISCHE_INHALTSSTOFFE not found"
          }
        }
      }
    },
    "/api/v1/ZUTAT_KRITISCHE_INHALTSSTOFFE/bulk": {
      "post": {
        "tags": [
          "ZUTAT_KRITISCHE_INHALTSSTOFFE"
        ],
        "summary": "Bulk ZUTAT_KRITISCHE_INHALTSSTOFFE insert",
        "description": "",
        "operationId": "bulkZUTAT_KRITISCHE_INHALTSSTOFFEInsert",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "ZUTAT_KRITISCHE_INHALTSSTOFFE objects",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ZUTAT_KRITISCHE_INHALTSSTOFFE"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "put": {
        "tags": [
          "ZUTAT_KRITISCHE_INHALTSSTOFFE"
        ],
        "summary": "Updates a ZUTAT_KRITISCHE_INHALTSSTOFFE",
        "description": "",
        "operationId": "updateZUTAT_KRITISCHE_INHALTSSTOFFE",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "ZUTAT_KRITISCHE_INHALTSSTOFFE objects with id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ZUTAT_KRITISCHE_INHALTSSTOFFE"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "ZUTAT_KRITISCHE_INHALTSSTOFFE"
        ],
        "summary": "Deletes a ZUTAT_KRITISCHE_INHALTSSTOFFE",
        "description": "",
        "operationId": "deleteZUTAT_KRITISCHE_INHALTSSTOFFE",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "ZUTAT_KRITISCHE_INHALTSSTOFFE objects contains id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ZUTAT_KRITISCHE_INHALTSSTOFFE"
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "ZUTAT_KRITISCHE_INHALTSSTOFFE not found"
          }
        }
      }
    },
    "/api/v1/ZUTAT_KRITISCHE_INHALTSSTOFFE/findOne": {
      "get": {
        "tags": [
          "ZUTAT_KRITISCHE_INHALTSSTOFFE"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "findOneZUTAT_KRITISCHE_INHALTSSTOFFE",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ZUTAT_KRITISCHE_INHALTSSTOFFE"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/ZUTAT_KRITISCHE_INHALTSSTOFFE/{ZUTAT_KRITISCHE_INHALTSSTOFFEId}/exists": {
      "get": {
        "tags": [
          "ZUTAT_KRITISCHE_INHALTSSTOFFE"
        ],
        "summary": "Check ZUTAT_KRITISCHE_INHALTSSTOFFE with provided ID exists",
        "description": "Returns a single ZUTAT_KRITISCHE_INHALTSSTOFFE",
        "operationId": "checkZUTAT_KRITISCHE_INHALTSSTOFFEExists",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "ZUTAT_KRITISCHE_INHALTSSTOFFEId",
            "in": "path",
            "description": "ID of ZUTAT_KRITISCHE_INHALTSSTOFFE",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/ZUTAT_KRITISCHE_INHALTSSTOFFE/count": {
      "get": {
        "tags": [
          "ZUTAT_KRITISCHE_INHALTSSTOFFE"
        ],
        "summary": "Get ZUTAT_KRITISCHE_INHALTSSTOFFE count",
        "operationId": "getZUTAT_KRITISCHE_INHALTSSTOFFECount",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/ZUTAT_KRITISCHE_INHALTSSTOFFE/groupby/{columnName}": {
      "get": {
        "tags": [
          "ZUTAT_KRITISCHE_INHALTSSTOFFE"
        ],
        "summary": "Group by column",
        "description": "",
        "operationId": "ZUTAT_KRITISCHE_INHALTSSTOFFEGroupByColumn",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ZUTAT_KRITISCHE_INHALTSSTOFFE"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/ZUTAT_KRITISCHE_INHALTSSTOFFE/distribution/{columnName}": {
      "get": {
        "tags": [
          "ZUTAT_KRITISCHE_INHALTSSTOFFE"
        ],
        "summary": "",
        "description": "",
        "operationId": "ZUTAT_KRITISCHE_INHALTSSTOFFEDistribution",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "min",
            "description": "min value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "max",
            "description": "max value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "step",
            "description": "step value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "steps",
            "description": "steps value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "func",
            "description": "comma separated aggregation functions",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/ZUTAT_KRITISCHE_INHALTSSTOFFE/distinct/{columnName}": {
      "get": {
        "tags": [
          "ZUTAT_KRITISCHE_INHALTSSTOFFE"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "ZUTAT_KRITISCHE_INHALTSSTOFFEDistinct",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/ZUTAT_KRITISCHE_INHALTSSTOFFE/aggregate/{columnName}": {
      "get": {
        "tags": [
          "ZUTAT_KRITISCHE_INHALTSSTOFFE"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "ZUTAT_KRITISCHE_INHALTSSTOFFEAggregate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "fields",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "func",
            "type": "String",
            "description": "Comma seperated aggregate functions"
          },
          {
            "in": "query",
            "name": "having",
            "type": "String",
            "description": "Having expression"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ZUTAT_KRITISCHE_INHALTSSTOFFE"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/ZUTAT/has/KATEGORIE_ZUTAT": {
      "get": {
        "tags": [
          "ZUTATHasManyKATEGORIE_ZUTAT"
        ],
        "summary": "Get ZUTAT list with KATEGORIE_ZUTAT children",
        "description": "",
        "operationId": "ZUTATHasManyKATEGORIE_ZUTATList",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields of model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/api/v1/ZUTAT/{ZUTATId}/KATEGORIE_ZUTAT": {
      "get": {
        "tags": [
          "ZUTATHasManyKATEGORIE_ZUTAT"
        ],
        "summary": "Find KATEGORIE_ZUTAT list by parent ZUTAT id",
        "description": "Returns a single ZUTAT",
        "operationId": "getKATEGORIE_ZUTATByZUTATId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "ZUTATId",
            "in": "path",
            "description": "ID of ZUTAT to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields of model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": "object"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "ZUTAT not found"
          }
        }
      },
      "post": {
        "tags": [
          "ZUTATHasManyKATEGORIE_ZUTAT"
        ],
        "summary": "Insert KATEGORIE_ZUTAT under a parent ZUTAT",
        "description": "Returns a single ZUTAT",
        "operationId": "insertKATEGORIE_ZUTATByZUTATId",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "KATEGORIE_ZUTAT object to insert",
            "required": true,
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "ZUTATId",
            "in": "path",
            "description": "ID of ZUTAT to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/ZUTAT/{ZUTATId}/KATEGORIE_ZUTAT/{KATEGORIE_ZUTATId}": {
      "get": {
        "tags": [
          "ZUTATHasManyKATEGORIE_ZUTAT"
        ],
        "summary": "Get by KATEGORIE_ZUTAT id parent ZUTAT id",
        "description": "Returns a single ZUTAT",
        "operationId": "getKATEGORIE_ZUTATByIdAndZUTATId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "ZUTATId",
            "in": "path",
            "description": "ID of parent ZUTAT",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "KATEGORIE_ZUTATId",
            "in": "path",
            "description": "ID of KATEGORIE_ZUTAT",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": "object"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "ZUTATHasManyKATEGORIE_ZUTAT"
        ],
        "summary": "Delete by KATEGORIE_ZUTAT id parent ZUTAT id",
        "description": "Returns a single ZUTAT",
        "operationId": "deleteKATEGORIE_ZUTATByIdAndZUTATId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "ZUTATId",
            "in": "path",
            "description": "ID of parent ZUTAT",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "KATEGORIE_ZUTATId",
            "in": "path",
            "description": "ID of cKATEGORIE_ZUTAT",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      },
      "put": {
        "tags": [
          "ZUTATHasManyKATEGORIE_ZUTAT"
        ],
        "summary": "Update KATEGORIE_ZUTAT under a parent ZUTAT",
        "description": "Returns a single ZUTAT",
        "operationId": "updateKATEGORIE_ZUTATByIdAndZUTATId",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "KATEGORIE_ZUTAT object to insert",
            "required": true,
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "ZUTATId",
            "in": "path",
            "description": "ID of ZUTAT to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "KATEGORIE_ZUTATId",
            "in": "path",
            "description": "ID of KATEGORIE_ZUTAT",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/ZUTAT/{ZUTATId}/KATEGORIE_ZUTAT/{KATEGORIE_ZUTATId}/exists": {
      "get": {
        "tags": [
          "ZUTATHasManyKATEGORIE_ZUTAT"
        ],
        "summary": "Check row exists by KATEGORIE_ZUTAT id and parent ZUTAT id",
        "description": "",
        "operationId": "existsKATEGORIE_ZUTATByIdAndZUTATId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "ZUTATId",
            "in": "path",
            "description": "ID of parent ZUTAT",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "KATEGORIE_ZUTATId",
            "in": "path",
            "description": "ID of KATEGORIE_ZUTAT",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/ZUTAT/{ZUTATId}/KATEGORIE_ZUTAT/findOne": {
      "get": {
        "tags": [
          "ZUTATHasManyKATEGORIE_ZUTAT"
        ],
        "summary": "Find one KATEGORIE_ZUTAT by parent ZUTAT id and filters",
        "description": "",
        "operationId": "findOneKATEGORIE_ZUTATByZUTATId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "ZUTATId",
            "in": "path",
            "description": "ID of parent ZUTAT",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields of model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/ZUTAT/{ZUTATId}/KATEGORIE_ZUTAT/count": {
      "get": {
        "tags": [
          "ZUTATHasManyKATEGORIE_ZUTAT"
        ],
        "summary": "Get KATEGORIE_ZUTAT count by parent id and filter",
        "description": "",
        "operationId": "getCountWithinZUTATId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "ZUTATId",
            "in": "path",
            "description": "ID of parent ZUTAT",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/ZUTAT/has/REZEPTINHALT": {
      "get": {
        "tags": [
          "ZUTATHasManyREZEPTINHALT"
        ],
        "summary": "Get ZUTAT list with REZEPTINHALT children",
        "description": "",
        "operationId": "ZUTATHasManyREZEPTINHALTList",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields of model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/api/v1/ZUTAT/{ZUTATId}/REZEPTINHALT": {
      "get": {
        "tags": [
          "ZUTATHasManyREZEPTINHALT"
        ],
        "summary": "Find REZEPTINHALT list by parent ZUTAT id",
        "description": "Returns a single ZUTAT",
        "operationId": "getREZEPTINHALTByZUTATId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "ZUTATId",
            "in": "path",
            "description": "ID of ZUTAT to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields of model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": "object"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "ZUTAT not found"
          }
        }
      },
      "post": {
        "tags": [
          "ZUTATHasManyREZEPTINHALT"
        ],
        "summary": "Insert REZEPTINHALT under a parent ZUTAT",
        "description": "Returns a single ZUTAT",
        "operationId": "insertREZEPTINHALTByZUTATId",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "REZEPTINHALT object to insert",
            "required": true,
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "ZUTATId",
            "in": "path",
            "description": "ID of ZUTAT to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/ZUTAT/{ZUTATId}/REZEPTINHALT/{REZEPTINHALTId}": {
      "get": {
        "tags": [
          "ZUTATHasManyREZEPTINHALT"
        ],
        "summary": "Get by REZEPTINHALT id parent ZUTAT id",
        "description": "Returns a single ZUTAT",
        "operationId": "getREZEPTINHALTByIdAndZUTATId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "ZUTATId",
            "in": "path",
            "description": "ID of parent ZUTAT",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "REZEPTINHALTId",
            "in": "path",
            "description": "ID of REZEPTINHALT",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": "object"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "ZUTATHasManyREZEPTINHALT"
        ],
        "summary": "Delete by REZEPTINHALT id parent ZUTAT id",
        "description": "Returns a single ZUTAT",
        "operationId": "deleteREZEPTINHALTByIdAndZUTATId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "ZUTATId",
            "in": "path",
            "description": "ID of parent ZUTAT",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "REZEPTINHALTId",
            "in": "path",
            "description": "ID of cREZEPTINHALT",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      },
      "put": {
        "tags": [
          "ZUTATHasManyREZEPTINHALT"
        ],
        "summary": "Update REZEPTINHALT under a parent ZUTAT",
        "description": "Returns a single ZUTAT",
        "operationId": "updateREZEPTINHALTByIdAndZUTATId",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "REZEPTINHALT object to insert",
            "required": true,
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "ZUTATId",
            "in": "path",
            "description": "ID of ZUTAT to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "REZEPTINHALTId",
            "in": "path",
            "description": "ID of REZEPTINHALT",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/ZUTAT/{ZUTATId}/REZEPTINHALT/{REZEPTINHALTId}/exists": {
      "get": {
        "tags": [
          "ZUTATHasManyREZEPTINHALT"
        ],
        "summary": "Check row exists by REZEPTINHALT id and parent ZUTAT id",
        "description": "",
        "operationId": "existsREZEPTINHALTByIdAndZUTATId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "ZUTATId",
            "in": "path",
            "description": "ID of parent ZUTAT",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "REZEPTINHALTId",
            "in": "path",
            "description": "ID of REZEPTINHALT",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/ZUTAT/{ZUTATId}/REZEPTINHALT/findOne": {
      "get": {
        "tags": [
          "ZUTATHasManyREZEPTINHALT"
        ],
        "summary": "Find one REZEPTINHALT by parent ZUTAT id and filters",
        "description": "",
        "operationId": "findOneREZEPTINHALTByZUTATId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "ZUTATId",
            "in": "path",
            "description": "ID of parent ZUTAT",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields of model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/ZUTAT/{ZUTATId}/REZEPTINHALT/count": {
      "get": {
        "tags": [
          "ZUTATHasManyREZEPTINHALT"
        ],
        "summary": "Get REZEPTINHALT count by parent id and filter",
        "description": "",
        "operationId": "getCountWithinZUTATId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "ZUTATId",
            "in": "path",
            "description": "ID of parent ZUTAT",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/ZUTAT/has/SENDUNG_ZUTAT": {
      "get": {
        "tags": [
          "ZUTATHasManySENDUNG_ZUTAT"
        ],
        "summary": "Get ZUTAT list with SENDUNG_ZUTAT children",
        "description": "",
        "operationId": "ZUTATHasManySENDUNG_ZUTATList",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields of model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/api/v1/ZUTAT/{ZUTATId}/SENDUNG_ZUTAT": {
      "get": {
        "tags": [
          "ZUTATHasManySENDUNG_ZUTAT"
        ],
        "summary": "Find SENDUNG_ZUTAT list by parent ZUTAT id",
        "description": "Returns a single ZUTAT",
        "operationId": "getSENDUNG_ZUTATByZUTATId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "ZUTATId",
            "in": "path",
            "description": "ID of ZUTAT to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields of model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": "object"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "ZUTAT not found"
          }
        }
      },
      "post": {
        "tags": [
          "ZUTATHasManySENDUNG_ZUTAT"
        ],
        "summary": "Insert SENDUNG_ZUTAT under a parent ZUTAT",
        "description": "Returns a single ZUTAT",
        "operationId": "insertSENDUNG_ZUTATByZUTATId",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "SENDUNG_ZUTAT object to insert",
            "required": true,
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "ZUTATId",
            "in": "path",
            "description": "ID of ZUTAT to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/ZUTAT/{ZUTATId}/SENDUNG_ZUTAT/{SENDUNG_ZUTATId}": {
      "get": {
        "tags": [
          "ZUTATHasManySENDUNG_ZUTAT"
        ],
        "summary": "Get by SENDUNG_ZUTAT id parent ZUTAT id",
        "description": "Returns a single ZUTAT",
        "operationId": "getSENDUNG_ZUTATByIdAndZUTATId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "ZUTATId",
            "in": "path",
            "description": "ID of parent ZUTAT",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "SENDUNG_ZUTATId",
            "in": "path",
            "description": "ID of SENDUNG_ZUTAT",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": "object"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "ZUTATHasManySENDUNG_ZUTAT"
        ],
        "summary": "Delete by SENDUNG_ZUTAT id parent ZUTAT id",
        "description": "Returns a single ZUTAT",
        "operationId": "deleteSENDUNG_ZUTATByIdAndZUTATId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "ZUTATId",
            "in": "path",
            "description": "ID of parent ZUTAT",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "SENDUNG_ZUTATId",
            "in": "path",
            "description": "ID of cSENDUNG_ZUTAT",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      },
      "put": {
        "tags": [
          "ZUTATHasManySENDUNG_ZUTAT"
        ],
        "summary": "Update SENDUNG_ZUTAT under a parent ZUTAT",
        "description": "Returns a single ZUTAT",
        "operationId": "updateSENDUNG_ZUTATByIdAndZUTATId",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "SENDUNG_ZUTAT object to insert",
            "required": true,
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "ZUTATId",
            "in": "path",
            "description": "ID of ZUTAT to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "SENDUNG_ZUTATId",
            "in": "path",
            "description": "ID of SENDUNG_ZUTAT",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/ZUTAT/{ZUTATId}/SENDUNG_ZUTAT/{SENDUNG_ZUTATId}/exists": {
      "get": {
        "tags": [
          "ZUTATHasManySENDUNG_ZUTAT"
        ],
        "summary": "Check row exists by SENDUNG_ZUTAT id and parent ZUTAT id",
        "description": "",
        "operationId": "existsSENDUNG_ZUTATByIdAndZUTATId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "ZUTATId",
            "in": "path",
            "description": "ID of parent ZUTAT",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "SENDUNG_ZUTATId",
            "in": "path",
            "description": "ID of SENDUNG_ZUTAT",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/ZUTAT/{ZUTATId}/SENDUNG_ZUTAT/findOne": {
      "get": {
        "tags": [
          "ZUTATHasManySENDUNG_ZUTAT"
        ],
        "summary": "Find one SENDUNG_ZUTAT by parent ZUTAT id and filters",
        "description": "",
        "operationId": "findOneSENDUNG_ZUTATByZUTATId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "ZUTATId",
            "in": "path",
            "description": "ID of parent ZUTAT",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields of model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/ZUTAT/{ZUTATId}/SENDUNG_ZUTAT/count": {
      "get": {
        "tags": [
          "ZUTATHasManySENDUNG_ZUTAT"
        ],
        "summary": "Get SENDUNG_ZUTAT count by parent id and filter",
        "description": "",
        "operationId": "getCountWithinZUTATId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "ZUTATId",
            "in": "path",
            "description": "ID of parent ZUTAT",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/ZUTAT/has/ZUTAT_KRITISCHE_INHALTSSTOFFE": {
      "get": {
        "tags": [
          "ZUTATHasManyZUTAT_KRITISCHE_INHALTSSTOFFE"
        ],
        "summary": "Get ZUTAT list with ZUTAT_KRITISCHE_INHALTSSTOFFE children",
        "description": "",
        "operationId": "ZUTATHasManyZUTAT_KRITISCHE_INHALTSSTOFFEList",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields of model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          }
        }
      }
    },
    "/api/v1/ZUTAT/{ZUTATId}/ZUTAT_KRITISCHE_INHALTSSTOFFE": {
      "get": {
        "tags": [
          "ZUTATHasManyZUTAT_KRITISCHE_INHALTSSTOFFE"
        ],
        "summary": "Find ZUTAT_KRITISCHE_INHALTSSTOFFE list by parent ZUTAT id",
        "description": "Returns a single ZUTAT",
        "operationId": "getZUTAT_KRITISCHE_INHALTSSTOFFEByZUTATId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "ZUTATId",
            "in": "path",
            "description": "ID of ZUTAT to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields of model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": "object"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "ZUTAT not found"
          }
        }
      },
      "post": {
        "tags": [
          "ZUTATHasManyZUTAT_KRITISCHE_INHALTSSTOFFE"
        ],
        "summary": "Insert ZUTAT_KRITISCHE_INHALTSSTOFFE under a parent ZUTAT",
        "description": "Returns a single ZUTAT",
        "operationId": "insertZUTAT_KRITISCHE_INHALTSSTOFFEByZUTATId",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "ZUTAT_KRITISCHE_INHALTSSTOFFE object to insert",
            "required": true,
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "ZUTATId",
            "in": "path",
            "description": "ID of ZUTAT to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/ZUTAT/{ZUTATId}/ZUTAT_KRITISCHE_INHALTSSTOFFE/{ZUTAT_KRITISCHE_INHALTSSTOFFEId}": {
      "get": {
        "tags": [
          "ZUTATHasManyZUTAT_KRITISCHE_INHALTSSTOFFE"
        ],
        "summary": "Get by ZUTAT_KRITISCHE_INHALTSSTOFFE id parent ZUTAT id",
        "description": "Returns a single ZUTAT",
        "operationId": "getZUTAT_KRITISCHE_INHALTSSTOFFEByIdAndZUTATId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "ZUTATId",
            "in": "path",
            "description": "ID of parent ZUTAT",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "ZUTAT_KRITISCHE_INHALTSSTOFFEId",
            "in": "path",
            "description": "ID of ZUTAT_KRITISCHE_INHALTSSTOFFE",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": "object"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "ZUTATHasManyZUTAT_KRITISCHE_INHALTSSTOFFE"
        ],
        "summary": "Delete by ZUTAT_KRITISCHE_INHALTSSTOFFE id parent ZUTAT id",
        "description": "Returns a single ZUTAT",
        "operationId": "deleteZUTAT_KRITISCHE_INHALTSSTOFFEByIdAndZUTATId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "ZUTATId",
            "in": "path",
            "description": "ID of parent ZUTAT",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "ZUTAT_KRITISCHE_INHALTSSTOFFEId",
            "in": "path",
            "description": "ID of cZUTAT_KRITISCHE_INHALTSSTOFFE",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      },
      "put": {
        "tags": [
          "ZUTATHasManyZUTAT_KRITISCHE_INHALTSSTOFFE"
        ],
        "summary": "Update ZUTAT_KRITISCHE_INHALTSSTOFFE under a parent ZUTAT",
        "description": "Returns a single ZUTAT",
        "operationId": "updateZUTAT_KRITISCHE_INHALTSSTOFFEByIdAndZUTATId",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "ZUTAT_KRITISCHE_INHALTSSTOFFE object to insert",
            "required": true,
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "ZUTATId",
            "in": "path",
            "description": "ID of ZUTAT to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "ZUTAT_KRITISCHE_INHALTSSTOFFEId",
            "in": "path",
            "description": "ID of ZUTAT_KRITISCHE_INHALTSSTOFFE",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/ZUTAT/{ZUTATId}/ZUTAT_KRITISCHE_INHALTSSTOFFE/{ZUTAT_KRITISCHE_INHALTSSTOFFEId}/exists": {
      "get": {
        "tags": [
          "ZUTATHasManyZUTAT_KRITISCHE_INHALTSSTOFFE"
        ],
        "summary": "Check row exists by ZUTAT_KRITISCHE_INHALTSSTOFFE id and parent ZUTAT id",
        "description": "",
        "operationId": "existsZUTAT_KRITISCHE_INHALTSSTOFFEByIdAndZUTATId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "ZUTATId",
            "in": "path",
            "description": "ID of parent ZUTAT",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "ZUTAT_KRITISCHE_INHALTSSTOFFEId",
            "in": "path",
            "description": "ID of ZUTAT_KRITISCHE_INHALTSSTOFFE",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/ZUTAT/{ZUTATId}/ZUTAT_KRITISCHE_INHALTSSTOFFE/findOne": {
      "get": {
        "tags": [
          "ZUTATHasManyZUTAT_KRITISCHE_INHALTSSTOFFE"
        ],
        "summary": "Find one ZUTAT_KRITISCHE_INHALTSSTOFFE by parent ZUTAT id and filters",
        "description": "",
        "operationId": "findOneZUTAT_KRITISCHE_INHALTSSTOFFEByZUTATId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "ZUTATId",
            "in": "path",
            "description": "ID of parent ZUTAT",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields of model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/ZUTAT/{ZUTATId}/ZUTAT_KRITISCHE_INHALTSSTOFFE/count": {
      "get": {
        "tags": [
          "ZUTATHasManyZUTAT_KRITISCHE_INHALTSSTOFFE"
        ],
        "summary": "Get ZUTAT_KRITISCHE_INHALTSSTOFFE count by parent id and filter",
        "description": "",
        "operationId": "getCountWithinZUTATId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "ZUTATId",
            "in": "path",
            "description": "ID of parent ZUTAT",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "sort parameter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          }
        }
      }
    },
    "/api/v1/ZUTAT": {
      "post": {
        "tags": [
          "ZUTAT"
        ],
        "summary": "Add a new ZUTAT",
        "description": "",
        "operationId": "addZUTAT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "ZUTAT object that needs to add",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ZUTAT"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "get": {
        "tags": [
          "ZUTAT"
        ],
        "summary": "Get list",
        "description": "",
        "operationId": "getZUTAT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/ZUTAT/{ZUTATId}": {
      "get": {
        "tags": [
          "ZUTAT"
        ],
        "summary": "Find ZUTAT by ID",
        "description": "Returns a single ZUTAT",
        "operationId": "getZUTATById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "ZUTATId",
            "in": "path",
            "description": "ID of ZUTAT to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ZUTAT"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "ZUTAT not found"
          }
        }
      },
      "put": {
        "tags": [
          "ZUTAT"
        ],
        "summary": "Updates a ZUTAT",
        "description": "",
        "operationId": "updateZUTAT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "ZUTATId",
            "in": "path",
            "description": "ID of ZUTAT to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "ZUTAT object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ZUTAT"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "ZUTAT"
        ],
        "summary": "Deletes a ZUTAT",
        "description": "",
        "operationId": "deleteZUTAT",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "ZUTATId",
            "in": "path",
            "description": "ID of ZUTAT to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "ZUTAT not found"
          }
        }
      }
    },
    "/api/v1/ZUTAT/bulk": {
      "post": {
        "tags": [
          "ZUTAT"
        ],
        "summary": "Bulk ZUTAT insert",
        "description": "",
        "operationId": "bulkZUTATInsert",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "ZUTAT objects",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ZUTAT"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "put": {
        "tags": [
          "ZUTAT"
        ],
        "summary": "Updates a ZUTAT",
        "description": "",
        "operationId": "updateZUTAT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "ZUTAT objects with id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ZUTAT"
              }
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "delete": {
        "tags": [
          "ZUTAT"
        ],
        "summary": "Deletes a ZUTAT",
        "description": "",
        "operationId": "deleteZUTAT",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "ZUTAT objects contains id",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ZUTAT"
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "ZUTAT not found"
          }
        }
      }
    },
    "/api/v1/ZUTAT/findOne": {
      "get": {
        "tags": [
          "ZUTAT"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "findOneZUTAT",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ZUTAT"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/ZUTAT/{ZUTATId}/exists": {
      "get": {
        "tags": [
          "ZUTAT"
        ],
        "summary": "Check ZUTAT with provided ID exists",
        "description": "Returns a single ZUTAT",
        "operationId": "checkZUTATExists",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "ZUTATId",
            "in": "path",
            "description": "ID of ZUTAT",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/api/v1/ZUTAT/count": {
      "get": {
        "tags": [
          "ZUTAT"
        ],
        "summary": "Get ZUTAT count",
        "operationId": "getZUTATCount",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/ZUTAT/groupby/{columnName}": {
      "get": {
        "tags": [
          "ZUTAT"
        ],
        "summary": "Group by column",
        "description": "",
        "operationId": "ZUTATGroupByColumn",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ZUTAT"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/ZUTAT/distribution/{columnName}": {
      "get": {
        "tags": [
          "ZUTAT"
        ],
        "summary": "",
        "description": "",
        "operationId": "ZUTATDistribution",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "min",
            "description": "min value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "max",
            "description": "max value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "step",
            "description": "step value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "steps",
            "description": "steps value",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "func",
            "description": "comma separated aggregation functions",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/ZUTAT/distinct/{columnName}": {
      "get": {
        "tags": [
          "ZUTAT"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "ZUTATDistinct",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "query",
            "name": "where",
            "type": "String",
            "description": "Where expression"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fieldst",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "object"
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/v1/ZUTAT/aggregate/{columnName}": {
      "get": {
        "tags": [
          "ZUTAT"
        ],
        "summary": "Get first one from filtered data",
        "description": "",
        "operationId": "ZUTATAggregate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "columnName",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "fields",
            "type": "String",
            "description": "Column name"
          },
          {
            "in": "path",
            "name": "func",
            "type": "String",
            "description": "Comma seperated aggregate functions"
          },
          {
            "in": "query",
            "name": "having",
            "type": "String",
            "description": "Having expression"
          },
          {
            "in": "query",
            "name": "fields",
            "type": "String",
            "description": "Comma seperated fields from the model"
          },
          {
            "in": "query",
            "name": "limit",
            "description": "Page size limit",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "offset",
            "description": "Pagination offset",
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "sort",
            "description": "Comma seperated sort fields",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ZUTAT"
            }
          },
          "405": {
            "description": "Invalid input"
          }
        }
      }
    }
  },
  "definitions": {
    "userAuth": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string",
          "format": "email",
          "nullable": false,
          "example": "test@xgenecloud.com"
        },
        "password": {
          "type": "string",
          "format": "password",
          "nullable": false,
          "example": "password"
        }
      }
    },
    "user": {
      "allOf": [
        {
          "$ref": "#/definitions/userAuth"
        },
        {
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "nullable": false,
              "readOnly": true
            },
            "firstname": {
              "type": "string",
              "nullable": false,
              "example": "FirstName"
            },
            "lastname": {
              "type": "string",
              "nullable": false,
              "example": "LastName"
            },
            "roles": {
              "type": "object",
              "readOnly": true
            },
            "created_at": {
              "type": "string",
              "readOnly": true
            },
            "updated_at": {
              "type": "string",
              "readOnly": true
            },
            "email_verified": {
              "type": "boolean",
              "readOnly": true
            }
          }
        }
      ]
    },
    "BESTELLUNG_REZEPT": {
      "type": "object",
      "properties": {
        "BESTELLNR": {
          "type": "integer",
          "nullable": false
        },
        "REZEPTID": {
          "type": "integer",
          "nullable": false
        },
        "STKZAHL": {
          "type": "integer"
        }
      }
    },
    "BESTELLUNG": {
      "type": "object",
      "properties": {
        "BESTELLNR": {
          "type": "integer",
          "nullable": false,
          "readOnly": true
        },
        "KUNDENNR": {
          "type": "integer"
        },
        "BESTELLDATUM": {
          "type": "string"
        },
        "RECHNUNGSBETRAG": {
          "type": "number"
        }
      }
    },
    "ERNAEHRUNGSKATEGORIE": {
      "type": "object",
      "properties": {
        "KategorieNR": {
          "type": "integer",
          "nullable": false
        },
        "KategorieName": {
          "type": "string"
        }
      }
    },
    "KATEGORIE_ZUTAT": {
      "type": "object",
      "properties": {
        "KategorieNR": {
          "type": "integer",
          "nullable": false
        },
        "ZutatenNR": {
          "type": "integer",
          "nullable": false
        }
      }
    },
    "KRITISCHE_INHALTSSTOFFE": {
      "type": "object",
      "properties": {
        "INHALTSSTOFFNR": {
          "type": "integer",
          "nullable": false
        },
        "INHALTSSTOFFNAME": {
          "type": "string"
        }
      }
    },
    "KUNDE": {
      "type": "object",
      "properties": {
        "KUNDENNR": {
          "type": "integer",
          "nullable": false
        },
        "NACHNAME": {
          "type": "string"
        },
        "VORNAME": {
          "type": "string"
        },
        "GEBURTSDATUM": {
          "type": "string"
        },
        "STRASSE": {
          "type": "string"
        },
        "HAUSNR": {
          "type": "string"
        },
        "PLZ": {
          "type": "string"
        },
        "ORT": {
          "type": "string"
        },
        "TELEFON": {
          "type": "string"
        },
        "EMAIL": {
          "type": "string"
        }
      }
    },
    "LIEFERANT_SENDUNG": {
      "type": "object",
      "properties": {
        "LIEFERANTENNR": {
          "type": "integer",
          "nullable": false
        },
        "SendungsNR": {
          "type": "integer",
          "nullable": false
        }
      }
    },
    "LIEFERANT": {
      "type": "object",
      "properties": {
        "LIEFERANTENNR": {
          "type": "integer",
          "nullable": false
        },
        "LIEFERANTENNAME": {
          "type": "string"
        },
        "STRASSE": {
          "type": "string"
        },
        "HAUSNR": {
          "type": "string"
        },
        "PLZ": {
          "type": "string"
        },
        "ORT": {
          "type": "string"
        },
        "TELEFON": {
          "type": "string"
        },
        "EMAIL": {
          "type": "string"
        }
      }
    },
    "REZEPT": {
      "type": "object",
      "properties": {
        "REZEPTID": {
          "type": "integer",
          "nullable": false
        },
        "REZEPTNAME": {
          "type": "string",
          "nullable": false
        }
      }
    },
    "REZEPTINHALT": {
      "type": "object",
      "properties": {
        "REZEPTID": {
          "type": "integer",
          "nullable": false
        },
        "REZEPTNAME": {
          "type": "string",
          "nullable": false
        },
        "MENGE": {
          "type": "integer",
          "nullable": false
        },
        "ZUTATENNR": {
          "type": "integer",
          "nullable": false
        }
      }
    },
    "SENDUNG_ZUTAT": {
      "type": "object",
      "properties": {
        "SendungsNR": {
          "type": "integer",
          "nullable": false
        },
        "ZutatenNR": {
          "type": "integer",
          "nullable": false
        },
        "Menge": {
          "type": "integer"
        }
      }
    },
    "SENDUNG": {
      "type": "object",
      "properties": {
        "SendungsNR": {
          "type": "integer",
          "nullable": false
        },
        "Lieferdatum": {
          "type": "string"
        }
      }
    },
    "ZUTAT_KRITISCHE_INHALTSSTOFFE": {
      "type": "object",
      "properties": {
        "ZUTATENNR": {
          "type": "integer",
          "nullable": false
        },
        "INHALTSSTOFFNR": {
          "type": "integer",
          "nullable": false
        }
      }
    },
    "ZUTAT": {
      "type": "object",
      "properties": {
        "ZUTATENNR": {
          "type": "integer",
          "nullable": false
        },
        "BEZEICHNUNG": {
          "type": "string"
        },
        "EINHEIT": {
          "type": "string"
        },
        "NETTOPREIS": {
          "type": "number"
        },
        "BESTAND": {
          "type": "integer"
        },
        "LIEFERANT": {
          "type": "integer"
        },
        "KALORIEN": {
          "type": "integer"
        },
        "KOHLENHYDRATE": {
          "type": "number"
        },
        "PROTEIN": {
          "type": "number"
        }
      }
    }
  },
  "externalDocs": {
    "description": "Find out more about XgeneCloud",
    "url": "http://xgenecloud.com"
  }
}